{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":1},{"_id":"source/images/css-inherit.png","path":"images/css-inherit.png","modified":0,"renderable":0},{"_id":"source/images/css-revert.png","path":"images/css-revert.png","modified":0,"renderable":0},{"_id":"source/images/css-sticky.png","path":"images/css-sticky.png","modified":0,"renderable":0}],"Cache":[{"_id":"source/_posts/position.md","hash":"a33488a3aab2428c71af3f26cf8698dbd6212d4a","modified":1677133239476},{"_id":"public/2019/06/19/position/index.html","hash":"b6e9f8ff154c6f9057e7dea61f2b145e219f7162","modified":1677132830926},{"_id":"public/archives/index.html","hash":"bc0865b5eb9b710e64f98bd48cb149525c14d5bf","modified":1677141985889},{"_id":"public/archives/2019/index.html","hash":"a129b19c48fd9b6e6854b554aed1697097014556","modified":1677132830925},{"_id":"public/archives/2019/06/index.html","hash":"3095789b2764615e8ca5277fa7efcea66e7cf8b9","modified":1677132830926},{"_id":"public/index.html","hash":"b9f38257a844569c9c11b38f8f6a71f092e5d446","modified":1677141985891},{"_id":"themes/landscape/.gitignore","hash":"58d26d4b5f2f94c2d02a4e4a448088e4a2527c77","modified":1560919979000},{"_id":"themes/landscape/Gruntfile.js","hash":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":1560919979000},{"_id":"themes/landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1560919979000},{"_id":"themes/landscape/README.md","hash":"37fae88639ef60d63bd0de22314d7cc4c5d94b07","modified":1560919979000},{"_id":"themes/landscape/_config.yml","hash":"79ac6b9ed6a4de5a21ea53fc3f5a3de92e2475ff","modified":1560919979000},{"_id":"themes/landscape/package.json","hash":"544f21a0b2c7034998b36ae94dba6e3e0f39f228","modified":1560919979000},{"_id":"themes/landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1560919979000},{"_id":"themes/landscape/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1560919979000},{"_id":"themes/landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1560919979000},{"_id":"themes/landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1560919979000},{"_id":"themes/landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1560919979000},{"_id":"themes/landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1560919979000},{"_id":"themes/landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1560919979000},{"_id":"themes/landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1560919979000},{"_id":"themes/landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1560919979000},{"_id":"themes/landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1560919979000},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1560919979000},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1560919979000},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1560919979000},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1560919979000},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1560919979000},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1560919979000},{"_id":"themes/landscape/layout/layout.ejs","hash":"f155824ca6130080bb057fa3e868a743c69c4cf5","modified":1560919979000},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1560919979000},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1560919979000},{"_id":"themes/landscape/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1560919979000},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"d0d753d39038284d52b10e5075979cc97db9cd20","modified":1560919979000},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1560919979000},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"950ddd91db8718153b329b96dc14439ab8463ba5","modified":1560919979000},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"c4c835615d96a950d51fa2c3b5d64d0596534fed","modified":1560919979000},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"93518893cf91287e797ebac543c560e2a63b8d0e","modified":1560919979000},{"_id":"themes/landscape/layout/_partial/gauges-analytics.ejs","hash":"aad6312ac197d6c5aaf2104ac863d7eba46b772a","modified":1560919979000},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1560919979000},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"5abf77aec957d9445fc71a8310252f0013c84578","modified":1560919979000},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"7e749050be126eadbc42decfbea75124ae430413","modified":1560919979000},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1560919979000},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1560919979000},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1560919979000},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1560919979000},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"0d4f064733f8b9e45c0ce131fe4a689d570c883a","modified":1560919979000},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1560919979000},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1560919979000},{"_id":"themes/landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1560919979000},{"_id":"themes/landscape/source/css/_variables.styl","hash":"628e307579ea46b5928424313993f17b8d729e92","modified":1560919979000},{"_id":"themes/landscape/source/css/style.styl","hash":"a70d9c44dac348d742702f6ba87e5bb3084d65db","modified":1560919979000},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1560919979000},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1560919979000},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1560919979000},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1560919979000},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1560919979000},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1560919979000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1560919979000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1560919979000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1560919979000},{"_id":"themes/landscape/source/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1560919979000},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1560919979000},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1560919979000},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1560919979000},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1560919979000},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1560919979000},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1560919979000},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1560919979000},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"10685f8787a79f79c9a26c2f943253450c498e3e","modified":1560919979000},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1560919979000},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1560919979000},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":1560919979000},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":1560919979000},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1560919979000},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1560919979000},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1560919979000},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1560919979000},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1560919979000},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1560919979000},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1560919979000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1560919979000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1560919979000},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1560919979000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1560919979000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1560919979000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1560919979000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1560919979000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1560919979000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1560919979000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1560919979000},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1560919979000},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1677141985894},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1677141986317},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1677141985894},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1677141985894},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1677141985894},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1677141985894},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1677141985894},{"_id":"public/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1677141986318},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1677141985894},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1677141985894},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1677141986323},{"_id":"public/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1677141986322},{"_id":"public/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1677141986322},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1677141986322},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1677141986323},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1677141986323},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1677141986323},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1677141986323},{"_id":"public/css/style.css","hash":"3986ef4b1f56bf0ac3bc45aab261e0278794c3f1","modified":1677141986323},{"_id":"public/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1677141986323},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1677141986323},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1677141986326},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1677141986327},{"_id":"source/_posts/BFC.md","hash":"fc99ac467ce04a864a113b34986d1575bb4620b3","modified":1677135748410},{"_id":"source/_posts/DNS.md","hash":"9d410b6c11798c8761f70c9c9dbdf1c9727adf3c","modified":1677136203867},{"_id":"source/_posts/Promise.md","hash":"755fe076b511667ba8e4079cb8a1bfe63beefe0c","modified":1677133400120},{"_id":"source/_posts/cookbook.md","hash":"f94eaed00a83b820039adfe242aec2a941ce5f46","modified":1677133276136},{"_id":"source/_posts/health.md","hash":"df51ca471df2c2f3536e545fcd9cb1c478d45f9a","modified":1677133212705},{"_id":"source/_posts/jsTypeTransfer.md","hash":"2e59405d01fe147981d128fb8d2422aa1e22c724","modified":1677133395135},{"_id":"source/_posts/leetCode_coin.md","hash":"6e52f20cced7dc1f47892fcb51e64f51674727d5","modified":1677133403249},{"_id":"source/_posts/mongodb.md","hash":"1ec1d5c0d5e5a746db8d60f90a22403d3050e9b4","modified":1677133228219},{"_id":"public/2023/02/23/mongodb/index.html","hash":"5d7d927aed651d03464294ce5fdd345e34fc2387","modified":1677132830928},{"_id":"public/2023/02/01/health/index.html","hash":"36f1fd6790766e9ff0fa6bb1af6d2033b69d7b0b","modified":1677136563749},{"_id":"public/2020/02/21/BFC/index.html","hash":"22baefda0711944882d69c6e996a0a90c4dd6793","modified":1677136563750},{"_id":"public/2018/08/20/DNS/index.html","hash":"c8d8b1d804d284442b8ac80577757ca70398b04e","modified":1677136563750},{"_id":"public/archives/2018/06/index.html","hash":"fb77a653c7414ad5cfab28752b02e9e79e40b77a","modified":1677141985889},{"_id":"public/archives/2018/index.html","hash":"364cdf9f46d1c5791e962e486826be55664f4825","modified":1677141985889},{"_id":"public/archives/2018/08/index.html","hash":"8c9e6c6ad3ebe06ea98048ce35988046570ba554","modified":1677141985890},{"_id":"public/archives/2020/index.html","hash":"999c9baa173203318bc30e2cdc01d9f42b26880b","modified":1677141985890},{"_id":"public/2023/02/01/cookbook/index.html","hash":"56c6a55692374c8533972582913f46c626d50327","modified":1677136563749},{"_id":"public/archives/2020/02/index.html","hash":"bad9b6de4ca5f1ff8d2fed3a00fdd5c0eea8b669","modified":1677141985890},{"_id":"public/archives/2020/08/index.html","hash":"3f19bbe27df21ad04d63b99df921939e87bb5544","modified":1677141985890},{"_id":"public/archives/2023/index.html","hash":"3a7d50a851c7deb8d01d9f35bb07efcb4f3925a0","modified":1677141985890},{"_id":"public/archives/2023/02/index.html","hash":"dd77da52f9fcdea2c7c587e6e7bfb138d87fbcb7","modified":1677141985890},{"_id":"public/2023/02/23/leetCode_coin/index.html","hash":"794d41db9e71cffffbde2ec7cb7d020c9f6fa140","modified":1677132830929},{"_id":"public/2020/08/01/Promise/index.html","hash":"69b25de4d7eac8dfa9971fe531cb2ce994ed6629","modified":1677136563757},{"_id":"public/2018/06/24/jsTypeTransfer/index.html","hash":"71733c4d93939aa5e63eaed1584de1ea500c04ef","modified":1677136563757},{"_id":"public/2023/01/31/mongodb/index.html","hash":"d1da24981633a93212a5d0a2072d6548b2190839","modified":1677136563750},{"_id":"public/archives/2023/01/index.html","hash":"424fcd079f43af55d2345695af0f2421d6c1d515","modified":1677141985890},{"_id":"public/tags/生活中的小确幸/index.html","hash":"bbf622c07bd5877fa5efc1b180acf0ea1598400e","modified":1677139201166},{"_id":"public/tags/全栈/index.html","hash":"813b5f2a144e6e0e63ddc33c6ccd415829bf0633","modified":1677141985890},{"_id":"public/tags/CSS/index.html","hash":"489f73b6519175323ec5b85ba11332b58747d63b","modified":1677141985890},{"_id":"public/tags/浏览器原理/index.html","hash":"0e425bc129bc37abf761fcdd03ca439f93ecdf55","modified":1677141985890},{"_id":"public/tags/Javascript/index.html","hash":"982db19a25d7e2b32a74071a4adf8c3b5c03eef6","modified":1677141985890},{"_id":"public/2023/02/23/position/index.html","hash":"a57c7ad8673f52a27e7dfac6ecfec20bace0ac11","modified":1677136563756},{"_id":"public/2023/01/31/leetCode_coin/index.html","hash":"9f1842524180ba5a91176778a132a3da75a0d54a","modified":1677136563757},{"_id":"source/css/BFC.md","hash":"fc99ac467ce04a864a113b34986d1575bb4620b3","modified":1677136701561},{"_id":"source/css/position.md","hash":"6356ebb30cb0eb5211f0f2c4ff29799c7af94ed6","modified":1677137333533},{"_id":"source/fullStack/mongodb.md","hash":"1ec1d5c0d5e5a746db8d60f90a22403d3050e9b4","modified":1677136701571},{"_id":"source/javascript/Promise.md","hash":"755fe076b511667ba8e4079cb8a1bfe63beefe0c","modified":1677136701564},{"_id":"source/javascript/jsTypeTransfer.md","hash":"2e59405d01fe147981d128fb8d2422aa1e22c724","modified":1677136701568},{"_id":"source/javascript/leetCode_coin.md","hash":"6e52f20cced7dc1f47892fcb51e64f51674727d5","modified":1677136701570},{"_id":"source/myLife/cookbook.md","hash":"f94eaed00a83b820039adfe242aec2a941ce5f46","modified":1677136701565},{"_id":"source/myLife/health.md","hash":"df51ca471df2c2f3536e545fcd9cb1c478d45f9a","modified":1677136701567},{"_id":"source/web/DNS.md","hash":"9d410b6c11798c8761f70c9c9dbdf1c9727adf3c","modified":1677136701563},{"_id":"public/css/BFC.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1677137374435},{"_id":"public/css/position.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1677137374435},{"_id":"public/fullStack/mongodb.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1677137374435},{"_id":"public/javascript/Promise.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1677137374435},{"_id":"public/javascript/jsTypeTransfer.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1677137374435},{"_id":"public/javascript/leetCode_coin.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1677137374435},{"_id":"public/myLife/health.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1677137374436},{"_id":"public/myLife/cookbook.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1677137374436},{"_id":"public/web/DNS.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1677137374436},{"_id":"source/_posts/js_promise.md","hash":"755fe076b511667ba8e4079cb8a1bfe63beefe0c","modified":1677136701564},{"_id":"source/_posts/css_BFC.md","hash":"fc99ac467ce04a864a113b34986d1575bb4620b3","modified":1677136701561},{"_id":"source/_posts/leetcode_coin.md","hash":"6e52f20cced7dc1f47892fcb51e64f51674727d5","modified":1677136701570},{"_id":"source/_posts/css_position.md","hash":"905531b0eb67932890e5ad54f9e5234f4c7cfd6f","modified":1677137674551},{"_id":"source/_posts/fullstack_mongodb.md","hash":"1ec1d5c0d5e5a746db8d60f90a22403d3050e9b4","modified":1677136701571},{"_id":"source/_posts/js_typeTransfer.md","hash":"2e59405d01fe147981d128fb8d2422aa1e22c724","modified":1677136701568},{"_id":"source/_posts/life_cookbook.md","hash":"f94eaed00a83b820039adfe242aec2a941ce5f46","modified":1677136701565},{"_id":"source/_posts/life_health.md","hash":"df51ca471df2c2f3536e545fcd9cb1c478d45f9a","modified":1677136701567},{"_id":"source/_posts/web_DNS.md","hash":"9d410b6c11798c8761f70c9c9dbdf1c9727adf3c","modified":1677136701563},{"_id":"public/2023/02/01/life_cookbook/index.html","hash":"290b78444553b023adef971c68f34a8a979e9776","modified":1677138071049},{"_id":"public/2023/02/01/life_health/index.html","hash":"5717d132c8e4fd434bb177adc002ec19e8866b00","modified":1677138071049},{"_id":"public/2023/01/31/fullstack_mongodb/index.html","hash":"bdfeb1180371d723fd1e47af2ff31c13ba388e7b","modified":1677138071049},{"_id":"public/2020/02/21/css_BFC/index.html","hash":"aff9873011d1bde12ab2bb3313bda6e886dedf1f","modified":1677137525512},{"_id":"public/2018/08/20/web_DNS/index.html","hash":"709fbcc9f5a18d834effbdcf9744bf9cc61de9e4","modified":1677138071050},{"_id":"public/2023/02/23/css_position/index.html","hash":"6328cede1b0a2e6a8c8c4f31d2895dbd768d6c43","modified":1677137525513},{"_id":"public/2023/01/31/leetcode_coin/index.html","hash":"53d3ba451665774c0087e0b631394ee7a29a64b8","modified":1677138071051},{"_id":"public/2020/08/01/js_promise/index.html","hash":"ba9efd8e32b995719b746093c2fb6896922ab7e6","modified":1677138071051},{"_id":"public/2018/06/24/js_typeTransfer/index.html","hash":"9613ebbfff108c1e0fc730d912780d13cda785d3","modified":1677138071051},{"_id":"source/_posts/css/css_BFC.md","hash":"fc99ac467ce04a864a113b34986d1575bb4620b3","modified":1677136701561},{"_id":"source/_posts/css/css_position.md","hash":"905531b0eb67932890e5ad54f9e5234f4c7cfd6f","modified":1677137674551},{"_id":"public/2020/02/21/css/css_BFC/index.html","hash":"e6c1a80d015bae9a7a1dd66326b556ec58d8ec1f","modified":1677138071050},{"_id":"public/2023/02/23/css/css_position/index.html","hash":"1c604aea440ace10bbcbf32142433079035a2628","modified":1677138071051},{"_id":"source/images/css-inherit.png","hash":"7d9bf868b276844cf7aeceb1061bbe46828b2e98","modified":1677138327882},{"_id":"source/images/css-revert.png","hash":"ce0d4dbf3570e58e4f4994289e59e57fe01a0cbe","modified":1677138327875},{"_id":"source/_posts/css/BFC.md","hash":"fc99ac467ce04a864a113b34986d1575bb4620b3","modified":1677136701561},{"_id":"source/_posts/fullstack/mongodb.md","hash":"1ec1d5c0d5e5a746db8d60f90a22403d3050e9b4","modified":1677136701571},{"_id":"source/_posts/javascript/leetcode_coin.md","hash":"ee1800b824430fe16ab7ab41e6e45b6484ec4e39","modified":1677141898295},{"_id":"source/_posts/css/position.md","hash":"95adcda457028a44f9f8f200a292a3c112032a68","modified":1677138765373},{"_id":"source/_posts/javascript/jsTypeTransfer.md","hash":"2e59405d01fe147981d128fb8d2422aa1e22c724","modified":1677136701568},{"_id":"source/_posts/life/cookbook.md","hash":"f94eaed00a83b820039adfe242aec2a941ce5f46","modified":1677136701565},{"_id":"source/_posts/life/health.md","hash":"df51ca471df2c2f3536e545fcd9cb1c478d45f9a","modified":1677136701567},{"_id":"source/_posts/javascript/promise.md","hash":"755fe076b511667ba8e4079cb8a1bfe63beefe0c","modified":1677136701564},{"_id":"source/_posts/web/DNS.md","hash":"9d410b6c11798c8761f70c9c9dbdf1c9727adf3c","modified":1677136701563},{"_id":"source/images/css-sticky.png","hash":"37852ac84b4673be7f4826cd0afdbe4cbb77317c","modified":1677138490551},{"_id":"public/2023/02/01/life/cookbook/index.html","hash":"c330a3cc5e4303b154a12f0772d8353207367bbb","modified":1677139201165},{"_id":"public/2023/02/01/life/health/index.html","hash":"e0b510a8583c0cbee159ea5de7dce403a35b170a","modified":1677139201165},{"_id":"public/2023/01/31/fullstack/mongodb/index.html","hash":"370927609e8e4a8ea5c28370ef376e8dd21e40aa","modified":1677141985889},{"_id":"public/2020/02/21/css/BFC/index.html","hash":"232816d3fbcd509bd938c15600be6a7036a6b89e","modified":1677141985889},{"_id":"public/2018/08/20/web/DNS/index.html","hash":"fbe521dfdc8fdd9d3459eb180322fb4f47fdab18","modified":1677141985889},{"_id":"public/2023/02/23/css/position/index.html","hash":"454c108455b834b8aeacf395fba28b5a9317de4c","modified":1677141985890},{"_id":"public/2023/01/31/javascript/leetcode_coin/index.html","hash":"5f802e8eb05223ea00b3789659c91b828aeedb4e","modified":1677141985890},{"_id":"public/2020/08/01/javascript/promise/index.html","hash":"b47641f6e4382be742993a2fc7ca4cefa5fa32d6","modified":1677141985890},{"_id":"public/2018/06/24/javascript/jsTypeTransfer/index.html","hash":"c97a2b7f7b765d5da92f2f1fddbeee216bba1972","modified":1677141985891},{"_id":"public/images/css-inherit.png","hash":"7d9bf868b276844cf7aeceb1061bbe46828b2e98","modified":1677141986319},{"_id":"public/images/css-revert.png","hash":"ce0d4dbf3570e58e4f4994289e59e57fe01a0cbe","modified":1677141986323},{"_id":"public/images/css-sticky.png","hash":"37852ac84b4673be7f4826cd0afdbe4cbb77317c","modified":1677141986326},{"_id":"source/_draft/health.md","hash":"df51ca471df2c2f3536e545fcd9cb1c478d45f9a","modified":1677136701567},{"_id":"source/_draft/cookbook.md","hash":"f94eaed00a83b820039adfe242aec2a941ce5f46","modified":1677136701565},{"_id":"source/_posts/javascript/leetcode_fruits.md","hash":"8e2c5e4c5ddc8e108193f3f17659b2d29d31578c","modified":1677141883911},{"_id":"source/_posts/javascript/leetcode_thief.md","hash":"93db461a77819f4d5b00aa0fc23539a77e618349","modified":1677141009026},{"_id":"public/2023/02/23/javascript/leetcode_fruits/index.html","hash":"36671593edb2046965426736bd0308fc9e300bd9","modified":1677141985890},{"_id":"public/2023/02/23/javascript/leetcode_thief/index.html","hash":"25cbc18cc014708611889aff5ff9b3c4e263bcf4","modified":1677141985890}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"BFC-草稿","date":"2020-02-20T16:00:00.000Z","_content":"\n## \n\n[BFC](https://blog.csdn.net/sinat_36422236/article/details/88763187)","source":"_posts/css/BFC.md","raw":"---\n title: BFC-草稿\n date: 2020-02-21\n tags: CSS\n---\n\n## \n\n[BFC](https://blog.csdn.net/sinat_36422236/article/details/88763187)","slug":"css/BFC","published":1,"updated":"2023-02-23T07:18:21.561Z","_id":"clegsrobi0000jvoak3wpjef6","comments":1,"layout":"post","photos":[],"link":"","content":"<p>## </p>\n<p><a href=\"https://blog.csdn.net/sinat_36422236/article/details/88763187\" target=\"_blank\" rel=\"noopener\">BFC</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>## </p>\n<p><a href=\"https://blog.csdn.net/sinat_36422236/article/details/88763187\" target=\"_blank\" rel=\"noopener\">BFC</a></p>\n"},{"title":"position 定位","_content":"在学习 position 之前，先来看一下几个适用于所有 css 属性的值： inherit、initial、unset、revert、all\n\n## initial 指定设置为默认值\n默认值列表存在 css 的属性汇总里(这个表网上没有找到资料，猜想和设备与浏览器也有关系，例如 font-family 根据不同浏览器和设备而定，position 默认 \"static\"，color 默认 \"#000\" 等)。\n\nPS：initial 在 IE11 下不兼容\n\n```css\npostion: initial;\ncolor: initial;\nwidth: inital;\n// other properties...\n```\n\n## inherit 指定继承父节点的该属性\n所有 css 属性的 inheritance 都被设置为 “yes” 或者 “no”，“yes” 表示继承， “no” 表示不继承。inherit 允许用户去手动把 inheritance 置为 “yes”。\n\n1. 根元素会被默认设置 initial 的值，如果属性是inheritance = “yes”的话，会去找父节点的属性值，例如 color 等。对此类属性设置 inherit 的话，它的父节点如果未设值，那么父节点会继承祖父节点的值，如果都未设置，最终找到根节点的 initial。\n2. inheritance = “no” 的属性会被默认设置为 initial 的值，例如 width、border、position 等。对此类属性设置 inherit 的话，它的父节点如果未设值，那么父节点会默认 initial 的值，也就是说它要么继承了父节点设置的值要么 initial。\n\n```css\npostion: inherit;\ncolor: inherit;\nwidth: inherit;\n// other properties...\n```\n\n## unset ：initial 与 inherit 的结合\n如果该属性的inheritance = “yes” 的话，就使用 inherit 继承，inheritance = “no” 就使用 initial 默认值。\n\n*注意：unset 与直接不设是不同的，如果不设，那么它会有一个优先级的判断（在 1.4 中会提到这个优先级），例如 div 上设置了 color1，父元素上也设置了 color2，这个 div 会使用 color1，而不是直接继承父元素的 color2。*\n\n```css\npostion: unset;\ncolor: unset;\nwidth: unset;\n// other properties...\n```\n\n## revert ：指定恢复 user-agent 的设置\nUA（user-agent）是浏览器给定的用户代理样式表，优先级比较低，继承(只作用与inheritance = “yes” 的属性) < UA < 用户样式表 < 内联样式，如图：\n\n![revert](/images/css-revert.png)\n\nrevert 与 initial 是不同的，display 的 initial 默认值是 inline，而 UA 把 div 标签 display 定义为 block，revert 指定恢复到 UA 的设置。\n\n如果设置为 revert 的属性在 UA 中未被设值的话，属性的行为与 unset 一致。\n\n*注意：据官网数据，目前 Chrome 与 FF 都不支持，safari 9.1+ 支持，其他浏览器待验证。*\n\n```css\ndisplay: revert;\n// other properties...\n```\n\n## all 属性\n\nall 用来重设除了unicode-bidi和direction之外的所有属性至它们的 initial 或 inherit 值。可选值为 initial，inherit，unset，revert。\n\n```css\nall: initial;\nall: inherit;\nall: unset;\nall: revert;\n// other properties...\n```\n\n1. all 设置为 inherit 后，给这个元素设置的其他优先级更高（加 !important、内联样式或在all:inherit之后设置）的属性都进行覆盖。例如下图，font-size 会继承，而 height、width 等都会生效。\n![inherit](/images/css-inherit.png)\n2. all 设置为 initial 后，官网给的说法是设置为初始值，优先级更高的属性理应和 inherit 一样被覆盖掉，但实际的效果却有一点奇怪，给这个元素设置的其他优先级更高的大多属性都可进行覆盖，margin-top，margin-bottom 在 safari、chrome 下不占位、ff 表现正常，width、height 不能覆盖。但 margin-top、margin-bottom、width、height在绝对定位（absolute 或 fixed）下可正常显示或覆盖。\n3. all 设置为 unset 后，与 initial 一样，margin-top、margin-bottom、width、height 表现奇怪，但在绝对定位下可正常显示或覆盖。另外 safari 中，color 属性在绝对定位下也不可以正常的覆盖。\n4. all 设置为 revert 属性，会把用户设置的属性重设为 UA 表中设置的属性，但在safari 9+的浏览器上，color 属性不可以正常的覆盖，在绝对定位下也不可以。\n\n## postion\n\npostion 属性支持以下值：\n```css\nposition: static;  // position 的默认值\nposition: relative;\nposition: absolute;\nposition: fixed;\nposition: sticky;\n// other properties...\n```\nsticky 这个属性在实验阶段，[兼容性](https://caniuse.com/?search=sticky)比较差: IE/opera 不支持，FF 32+，chrome 56+，Safari 6.1+）。\n\n一个定位元素是指 postion 被计算为relative,absolute,fixed或sticky的一个元素。（注意：元素如果设置了__非 none 的 transform 属性__，那么它就变成了定位元素。偏移 top、bottom、left、right 只对定位元素有效。）\n- 相对定位元素：被计算为 relative 的元素，\n- 绝对定位元素（这是官方的说法，不同于我之前以为的区分绝对定位和固定定位）：被计算为 absolute 或 fixed 的元素，\n- 粘性定位元素：被计算为 sticky 的元素。\n\n### static\n\nstatic 是默认定位，即 initial 所指定的 position 的值，此时偏移值 和z-index 都无效。\n\n### relative\n\nrelative 是相对定位，relative 会根据它的大小给它留出固定的空间，再去做它的偏移，也就是说 relative 的偏移是在它固定留白的基础上做的，并且偏移后并不会改变它的留白和大小。\n\nposition：relative 未定义在 table-*-group, table-row, table-column, table-cell, table-caption 元素上的效果。\n\n### absolute\n\nabsolute 是绝对定位，不会为元素预留空间，它相对于最近的祖先定位元素来定位，可以设置margin，并且不会被合并（相邻元素的margin-top 和 margin-bottom总是会被合并）。\n\n### fixed\n\nfixed 是绝对定位，与 absolute 很像，只是它相对于屏幕视口 viewport 来定位，屏幕滚动的时候元素位置不变。\n\n### sticky：relative 与 fixed 的结合\n\nsticky 必须设置了偏移量（相对于屏幕视口） top/left/bottom/right 才生效，否则就和 relative 同效。在滚动到该偏移量时，采用 fixed 的定位，但当往下滚动到该元素的底部与父节点的内容（不包括 padding、margin、padding）的底部相重叠、或者往上滚动到该元素在 relative 布局下相对于父元素所在位置时，快照它当前的偏移位置，并采用 relative 定位。\n\nsticky可以用来做首字母搜索，A标题的区域内容显示时，A标题一直固定在顶部，屏幕滚动到 B区域内容时，B标题代替A一直固定在顶部。\n\n![sticky](/images/css-sticky.png)","source":"_posts/css/position.md","raw":"---\ntitle: position 定位\ntags: CSS\n---\n在学习 position 之前，先来看一下几个适用于所有 css 属性的值： inherit、initial、unset、revert、all\n\n## initial 指定设置为默认值\n默认值列表存在 css 的属性汇总里(这个表网上没有找到资料，猜想和设备与浏览器也有关系，例如 font-family 根据不同浏览器和设备而定，position 默认 \"static\"，color 默认 \"#000\" 等)。\n\nPS：initial 在 IE11 下不兼容\n\n```css\npostion: initial;\ncolor: initial;\nwidth: inital;\n// other properties...\n```\n\n## inherit 指定继承父节点的该属性\n所有 css 属性的 inheritance 都被设置为 “yes” 或者 “no”，“yes” 表示继承， “no” 表示不继承。inherit 允许用户去手动把 inheritance 置为 “yes”。\n\n1. 根元素会被默认设置 initial 的值，如果属性是inheritance = “yes”的话，会去找父节点的属性值，例如 color 等。对此类属性设置 inherit 的话，它的父节点如果未设值，那么父节点会继承祖父节点的值，如果都未设置，最终找到根节点的 initial。\n2. inheritance = “no” 的属性会被默认设置为 initial 的值，例如 width、border、position 等。对此类属性设置 inherit 的话，它的父节点如果未设值，那么父节点会默认 initial 的值，也就是说它要么继承了父节点设置的值要么 initial。\n\n```css\npostion: inherit;\ncolor: inherit;\nwidth: inherit;\n// other properties...\n```\n\n## unset ：initial 与 inherit 的结合\n如果该属性的inheritance = “yes” 的话，就使用 inherit 继承，inheritance = “no” 就使用 initial 默认值。\n\n*注意：unset 与直接不设是不同的，如果不设，那么它会有一个优先级的判断（在 1.4 中会提到这个优先级），例如 div 上设置了 color1，父元素上也设置了 color2，这个 div 会使用 color1，而不是直接继承父元素的 color2。*\n\n```css\npostion: unset;\ncolor: unset;\nwidth: unset;\n// other properties...\n```\n\n## revert ：指定恢复 user-agent 的设置\nUA（user-agent）是浏览器给定的用户代理样式表，优先级比较低，继承(只作用与inheritance = “yes” 的属性) < UA < 用户样式表 < 内联样式，如图：\n\n![revert](/images/css-revert.png)\n\nrevert 与 initial 是不同的，display 的 initial 默认值是 inline，而 UA 把 div 标签 display 定义为 block，revert 指定恢复到 UA 的设置。\n\n如果设置为 revert 的属性在 UA 中未被设值的话，属性的行为与 unset 一致。\n\n*注意：据官网数据，目前 Chrome 与 FF 都不支持，safari 9.1+ 支持，其他浏览器待验证。*\n\n```css\ndisplay: revert;\n// other properties...\n```\n\n## all 属性\n\nall 用来重设除了unicode-bidi和direction之外的所有属性至它们的 initial 或 inherit 值。可选值为 initial，inherit，unset，revert。\n\n```css\nall: initial;\nall: inherit;\nall: unset;\nall: revert;\n// other properties...\n```\n\n1. all 设置为 inherit 后，给这个元素设置的其他优先级更高（加 !important、内联样式或在all:inherit之后设置）的属性都进行覆盖。例如下图，font-size 会继承，而 height、width 等都会生效。\n![inherit](/images/css-inherit.png)\n2. all 设置为 initial 后，官网给的说法是设置为初始值，优先级更高的属性理应和 inherit 一样被覆盖掉，但实际的效果却有一点奇怪，给这个元素设置的其他优先级更高的大多属性都可进行覆盖，margin-top，margin-bottom 在 safari、chrome 下不占位、ff 表现正常，width、height 不能覆盖。但 margin-top、margin-bottom、width、height在绝对定位（absolute 或 fixed）下可正常显示或覆盖。\n3. all 设置为 unset 后，与 initial 一样，margin-top、margin-bottom、width、height 表现奇怪，但在绝对定位下可正常显示或覆盖。另外 safari 中，color 属性在绝对定位下也不可以正常的覆盖。\n4. all 设置为 revert 属性，会把用户设置的属性重设为 UA 表中设置的属性，但在safari 9+的浏览器上，color 属性不可以正常的覆盖，在绝对定位下也不可以。\n\n## postion\n\npostion 属性支持以下值：\n```css\nposition: static;  // position 的默认值\nposition: relative;\nposition: absolute;\nposition: fixed;\nposition: sticky;\n// other properties...\n```\nsticky 这个属性在实验阶段，[兼容性](https://caniuse.com/?search=sticky)比较差: IE/opera 不支持，FF 32+，chrome 56+，Safari 6.1+）。\n\n一个定位元素是指 postion 被计算为relative,absolute,fixed或sticky的一个元素。（注意：元素如果设置了__非 none 的 transform 属性__，那么它就变成了定位元素。偏移 top、bottom、left、right 只对定位元素有效。）\n- 相对定位元素：被计算为 relative 的元素，\n- 绝对定位元素（这是官方的说法，不同于我之前以为的区分绝对定位和固定定位）：被计算为 absolute 或 fixed 的元素，\n- 粘性定位元素：被计算为 sticky 的元素。\n\n### static\n\nstatic 是默认定位，即 initial 所指定的 position 的值，此时偏移值 和z-index 都无效。\n\n### relative\n\nrelative 是相对定位，relative 会根据它的大小给它留出固定的空间，再去做它的偏移，也就是说 relative 的偏移是在它固定留白的基础上做的，并且偏移后并不会改变它的留白和大小。\n\nposition：relative 未定义在 table-*-group, table-row, table-column, table-cell, table-caption 元素上的效果。\n\n### absolute\n\nabsolute 是绝对定位，不会为元素预留空间，它相对于最近的祖先定位元素来定位，可以设置margin，并且不会被合并（相邻元素的margin-top 和 margin-bottom总是会被合并）。\n\n### fixed\n\nfixed 是绝对定位，与 absolute 很像，只是它相对于屏幕视口 viewport 来定位，屏幕滚动的时候元素位置不变。\n\n### sticky：relative 与 fixed 的结合\n\nsticky 必须设置了偏移量（相对于屏幕视口） top/left/bottom/right 才生效，否则就和 relative 同效。在滚动到该偏移量时，采用 fixed 的定位，但当往下滚动到该元素的底部与父节点的内容（不包括 padding、margin、padding）的底部相重叠、或者往上滚动到该元素在 relative 布局下相对于父元素所在位置时，快照它当前的偏移位置，并采用 relative 定位。\n\nsticky可以用来做首字母搜索，A标题的区域内容显示时，A标题一直固定在顶部，屏幕滚动到 B区域内容时，B标题代替A一直固定在顶部。\n\n![sticky](/images/css-sticky.png)","slug":"css/position","published":1,"date":"2023-02-23T07:18:21.572Z","updated":"2023-02-23T07:52:45.373Z","_id":"clegsrqdn0002jvoa146u59so","comments":1,"layout":"post","photos":[],"link":"","content":"<p>在学习 position 之前，先来看一下几个适用于所有 css 属性的值： inherit、initial、unset、revert、all</p>\n<h2 id=\"initial-指定设置为默认值\"><a href=\"#initial-指定设置为默认值\" class=\"headerlink\" title=\"initial 指定设置为默认值\"></a>initial 指定设置为默认值</h2><p>默认值列表存在 css 的属性汇总里(这个表网上没有找到资料，猜想和设备与浏览器也有关系，例如 font-family 根据不同浏览器和设备而定，position 默认 “static”，color 默认 “#000” 等)。</p>\n<p>PS：initial 在 IE11 下不兼容</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">postion</span>: <span class=\"selector-tag\">initial</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">color</span>: <span class=\"selector-tag\">initial</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">width</span>: <span class=\"selector-tag\">inital</span>;</span><br><span class=\"line\">// other properties...</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"inherit-指定继承父节点的该属性\"><a href=\"#inherit-指定继承父节点的该属性\" class=\"headerlink\" title=\"inherit 指定继承父节点的该属性\"></a>inherit 指定继承父节点的该属性</h2><p>所有 css 属性的 inheritance 都被设置为 “yes” 或者 “no”，“yes” 表示继承， “no” 表示不继承。inherit 允许用户去手动把 inheritance 置为 “yes”。</p>\n<ol>\n<li>根元素会被默认设置 initial 的值，如果属性是inheritance = “yes”的话，会去找父节点的属性值，例如 color 等。对此类属性设置 inherit 的话，它的父节点如果未设值，那么父节点会继承祖父节点的值，如果都未设置，最终找到根节点的 initial。</li>\n<li>inheritance = “no” 的属性会被默认设置为 initial 的值，例如 width、border、position 等。对此类属性设置 inherit 的话，它的父节点如果未设值，那么父节点会默认 initial 的值，也就是说它要么继承了父节点设置的值要么 initial。</li>\n</ol>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">postion</span>: <span class=\"selector-tag\">inherit</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">color</span>: <span class=\"selector-tag\">inherit</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">width</span>: <span class=\"selector-tag\">inherit</span>;</span><br><span class=\"line\">// other properties...</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"unset-：initial-与-inherit-的结合\"><a href=\"#unset-：initial-与-inherit-的结合\" class=\"headerlink\" title=\"unset ：initial 与 inherit 的结合\"></a>unset ：initial 与 inherit 的结合</h2><p>如果该属性的inheritance = “yes” 的话，就使用 inherit 继承，inheritance = “no” 就使用 initial 默认值。</p>\n<p><em>注意：unset 与直接不设是不同的，如果不设，那么它会有一个优先级的判断（在 1.4 中会提到这个优先级），例如 div 上设置了 color1，父元素上也设置了 color2，这个 div 会使用 color1，而不是直接继承父元素的 color2。</em></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">postion</span>: <span class=\"selector-tag\">unset</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">color</span>: <span class=\"selector-tag\">unset</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">width</span>: <span class=\"selector-tag\">unset</span>;</span><br><span class=\"line\">// other properties...</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"revert-：指定恢复-user-agent-的设置\"><a href=\"#revert-：指定恢复-user-agent-的设置\" class=\"headerlink\" title=\"revert ：指定恢复 user-agent 的设置\"></a>revert ：指定恢复 user-agent 的设置</h2><p>UA（user-agent）是浏览器给定的用户代理样式表，优先级比较低，继承(只作用与inheritance = “yes” 的属性) &lt; UA &lt; 用户样式表 &lt; 内联样式，如图：</p>\n<p><img src=\"/images/css-revert.png\" alt=\"revert\"></p>\n<p>revert 与 initial 是不同的，display 的 initial 默认值是 inline，而 UA 把 div 标签 display 定义为 block，revert 指定恢复到 UA 的设置。</p>\n<p>如果设置为 revert 的属性在 UA 中未被设值的话，属性的行为与 unset 一致。</p>\n<p><em>注意：据官网数据，目前 Chrome 与 FF 都不支持，safari 9.1+ 支持，其他浏览器待验证。</em></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">display</span>: <span class=\"selector-tag\">revert</span>;</span><br><span class=\"line\">// other properties...</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"all-属性\"><a href=\"#all-属性\" class=\"headerlink\" title=\"all 属性\"></a>all 属性</h2><p>all 用来重设除了unicode-bidi和direction之外的所有属性至它们的 initial 或 inherit 值。可选值为 initial，inherit，unset，revert。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">all</span>: <span class=\"selector-tag\">initial</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">all</span>: <span class=\"selector-tag\">inherit</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">all</span>: <span class=\"selector-tag\">unset</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">all</span>: <span class=\"selector-tag\">revert</span>;</span><br><span class=\"line\">// other properties...</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>all 设置为 inherit 后，给这个元素设置的其他优先级更高（加 !important、内联样式或在all:inherit之后设置）的属性都进行覆盖。例如下图，font-size 会继承，而 height、width 等都会生效。<br><img src=\"/images/css-inherit.png\" alt=\"inherit\"></li>\n<li>all 设置为 initial 后，官网给的说法是设置为初始值，优先级更高的属性理应和 inherit 一样被覆盖掉，但实际的效果却有一点奇怪，给这个元素设置的其他优先级更高的大多属性都可进行覆盖，margin-top，margin-bottom 在 safari、chrome 下不占位、ff 表现正常，width、height 不能覆盖。但 margin-top、margin-bottom、width、height在绝对定位（absolute 或 fixed）下可正常显示或覆盖。</li>\n<li>all 设置为 unset 后，与 initial 一样，margin-top、margin-bottom、width、height 表现奇怪，但在绝对定位下可正常显示或覆盖。另外 safari 中，color 属性在绝对定位下也不可以正常的覆盖。</li>\n<li>all 设置为 revert 属性，会把用户设置的属性重设为 UA 表中设置的属性，但在safari 9+的浏览器上，color 属性不可以正常的覆盖，在绝对定位下也不可以。</li>\n</ol>\n<h2 id=\"postion\"><a href=\"#postion\" class=\"headerlink\" title=\"postion\"></a>postion</h2><p>postion 属性支持以下值：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">position: static;  // position 的默认值</span><br><span class=\"line\"><span class=\"selector-tag\">position</span>: <span class=\"selector-tag\">relative</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">position</span>: <span class=\"selector-tag\">absolute</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">position</span>: <span class=\"selector-tag\">fixed</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">position</span>: <span class=\"selector-tag\">sticky</span>;</span><br><span class=\"line\">// other properties...</span><br></pre></td></tr></table></figure>\n\n<p>sticky 这个属性在实验阶段，<a href=\"https://caniuse.com/?search=sticky\" target=\"_blank\" rel=\"noopener\">兼容性</a>比较差: IE/opera 不支持，FF 32+，chrome 56+，Safari 6.1+）。</p>\n<p>一个定位元素是指 postion 被计算为relative,absolute,fixed或sticky的一个元素。（注意：元素如果设置了<strong>非 none 的 transform 属性</strong>，那么它就变成了定位元素。偏移 top、bottom、left、right 只对定位元素有效。）</p>\n<ul>\n<li>相对定位元素：被计算为 relative 的元素，</li>\n<li>绝对定位元素（这是官方的说法，不同于我之前以为的区分绝对定位和固定定位）：被计算为 absolute 或 fixed 的元素，</li>\n<li>粘性定位元素：被计算为 sticky 的元素。</li>\n</ul>\n<h3 id=\"static\"><a href=\"#static\" class=\"headerlink\" title=\"static\"></a>static</h3><p>static 是默认定位，即 initial 所指定的 position 的值，此时偏移值 和z-index 都无效。</p>\n<h3 id=\"relative\"><a href=\"#relative\" class=\"headerlink\" title=\"relative\"></a>relative</h3><p>relative 是相对定位，relative 会根据它的大小给它留出固定的空间，再去做它的偏移，也就是说 relative 的偏移是在它固定留白的基础上做的，并且偏移后并不会改变它的留白和大小。</p>\n<p>position：relative 未定义在 table-*-group, table-row, table-column, table-cell, table-caption 元素上的效果。</p>\n<h3 id=\"absolute\"><a href=\"#absolute\" class=\"headerlink\" title=\"absolute\"></a>absolute</h3><p>absolute 是绝对定位，不会为元素预留空间，它相对于最近的祖先定位元素来定位，可以设置margin，并且不会被合并（相邻元素的margin-top 和 margin-bottom总是会被合并）。</p>\n<h3 id=\"fixed\"><a href=\"#fixed\" class=\"headerlink\" title=\"fixed\"></a>fixed</h3><p>fixed 是绝对定位，与 absolute 很像，只是它相对于屏幕视口 viewport 来定位，屏幕滚动的时候元素位置不变。</p>\n<h3 id=\"sticky：relative-与-fixed-的结合\"><a href=\"#sticky：relative-与-fixed-的结合\" class=\"headerlink\" title=\"sticky：relative 与 fixed 的结合\"></a>sticky：relative 与 fixed 的结合</h3><p>sticky 必须设置了偏移量（相对于屏幕视口） top/left/bottom/right 才生效，否则就和 relative 同效。在滚动到该偏移量时，采用 fixed 的定位，但当往下滚动到该元素的底部与父节点的内容（不包括 padding、margin、padding）的底部相重叠、或者往上滚动到该元素在 relative 布局下相对于父元素所在位置时，快照它当前的偏移位置，并采用 relative 定位。</p>\n<p>sticky可以用来做首字母搜索，A标题的区域内容显示时，A标题一直固定在顶部，屏幕滚动到 B区域内容时，B标题代替A一直固定在顶部。</p>\n<p><img src=\"/images/css-sticky.png\" alt=\"sticky\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>在学习 position 之前，先来看一下几个适用于所有 css 属性的值： inherit、initial、unset、revert、all</p>\n<h2 id=\"initial-指定设置为默认值\"><a href=\"#initial-指定设置为默认值\" class=\"headerlink\" title=\"initial 指定设置为默认值\"></a>initial 指定设置为默认值</h2><p>默认值列表存在 css 的属性汇总里(这个表网上没有找到资料，猜想和设备与浏览器也有关系，例如 font-family 根据不同浏览器和设备而定，position 默认 “static”，color 默认 “#000” 等)。</p>\n<p>PS：initial 在 IE11 下不兼容</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">postion</span>: <span class=\"selector-tag\">initial</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">color</span>: <span class=\"selector-tag\">initial</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">width</span>: <span class=\"selector-tag\">inital</span>;</span><br><span class=\"line\">// other properties...</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"inherit-指定继承父节点的该属性\"><a href=\"#inherit-指定继承父节点的该属性\" class=\"headerlink\" title=\"inherit 指定继承父节点的该属性\"></a>inherit 指定继承父节点的该属性</h2><p>所有 css 属性的 inheritance 都被设置为 “yes” 或者 “no”，“yes” 表示继承， “no” 表示不继承。inherit 允许用户去手动把 inheritance 置为 “yes”。</p>\n<ol>\n<li>根元素会被默认设置 initial 的值，如果属性是inheritance = “yes”的话，会去找父节点的属性值，例如 color 等。对此类属性设置 inherit 的话，它的父节点如果未设值，那么父节点会继承祖父节点的值，如果都未设置，最终找到根节点的 initial。</li>\n<li>inheritance = “no” 的属性会被默认设置为 initial 的值，例如 width、border、position 等。对此类属性设置 inherit 的话，它的父节点如果未设值，那么父节点会默认 initial 的值，也就是说它要么继承了父节点设置的值要么 initial。</li>\n</ol>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">postion</span>: <span class=\"selector-tag\">inherit</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">color</span>: <span class=\"selector-tag\">inherit</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">width</span>: <span class=\"selector-tag\">inherit</span>;</span><br><span class=\"line\">// other properties...</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"unset-：initial-与-inherit-的结合\"><a href=\"#unset-：initial-与-inherit-的结合\" class=\"headerlink\" title=\"unset ：initial 与 inherit 的结合\"></a>unset ：initial 与 inherit 的结合</h2><p>如果该属性的inheritance = “yes” 的话，就使用 inherit 继承，inheritance = “no” 就使用 initial 默认值。</p>\n<p><em>注意：unset 与直接不设是不同的，如果不设，那么它会有一个优先级的判断（在 1.4 中会提到这个优先级），例如 div 上设置了 color1，父元素上也设置了 color2，这个 div 会使用 color1，而不是直接继承父元素的 color2。</em></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">postion</span>: <span class=\"selector-tag\">unset</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">color</span>: <span class=\"selector-tag\">unset</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">width</span>: <span class=\"selector-tag\">unset</span>;</span><br><span class=\"line\">// other properties...</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"revert-：指定恢复-user-agent-的设置\"><a href=\"#revert-：指定恢复-user-agent-的设置\" class=\"headerlink\" title=\"revert ：指定恢复 user-agent 的设置\"></a>revert ：指定恢复 user-agent 的设置</h2><p>UA（user-agent）是浏览器给定的用户代理样式表，优先级比较低，继承(只作用与inheritance = “yes” 的属性) &lt; UA &lt; 用户样式表 &lt; 内联样式，如图：</p>\n<p><img src=\"/images/css-revert.png\" alt=\"revert\"></p>\n<p>revert 与 initial 是不同的，display 的 initial 默认值是 inline，而 UA 把 div 标签 display 定义为 block，revert 指定恢复到 UA 的设置。</p>\n<p>如果设置为 revert 的属性在 UA 中未被设值的话，属性的行为与 unset 一致。</p>\n<p><em>注意：据官网数据，目前 Chrome 与 FF 都不支持，safari 9.1+ 支持，其他浏览器待验证。</em></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">display</span>: <span class=\"selector-tag\">revert</span>;</span><br><span class=\"line\">// other properties...</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"all-属性\"><a href=\"#all-属性\" class=\"headerlink\" title=\"all 属性\"></a>all 属性</h2><p>all 用来重设除了unicode-bidi和direction之外的所有属性至它们的 initial 或 inherit 值。可选值为 initial，inherit，unset，revert。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">all</span>: <span class=\"selector-tag\">initial</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">all</span>: <span class=\"selector-tag\">inherit</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">all</span>: <span class=\"selector-tag\">unset</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">all</span>: <span class=\"selector-tag\">revert</span>;</span><br><span class=\"line\">// other properties...</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>all 设置为 inherit 后，给这个元素设置的其他优先级更高（加 !important、内联样式或在all:inherit之后设置）的属性都进行覆盖。例如下图，font-size 会继承，而 height、width 等都会生效。<br><img src=\"/images/css-inherit.png\" alt=\"inherit\"></li>\n<li>all 设置为 initial 后，官网给的说法是设置为初始值，优先级更高的属性理应和 inherit 一样被覆盖掉，但实际的效果却有一点奇怪，给这个元素设置的其他优先级更高的大多属性都可进行覆盖，margin-top，margin-bottom 在 safari、chrome 下不占位、ff 表现正常，width、height 不能覆盖。但 margin-top、margin-bottom、width、height在绝对定位（absolute 或 fixed）下可正常显示或覆盖。</li>\n<li>all 设置为 unset 后，与 initial 一样，margin-top、margin-bottom、width、height 表现奇怪，但在绝对定位下可正常显示或覆盖。另外 safari 中，color 属性在绝对定位下也不可以正常的覆盖。</li>\n<li>all 设置为 revert 属性，会把用户设置的属性重设为 UA 表中设置的属性，但在safari 9+的浏览器上，color 属性不可以正常的覆盖，在绝对定位下也不可以。</li>\n</ol>\n<h2 id=\"postion\"><a href=\"#postion\" class=\"headerlink\" title=\"postion\"></a>postion</h2><p>postion 属性支持以下值：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">position: static;  // position 的默认值</span><br><span class=\"line\"><span class=\"selector-tag\">position</span>: <span class=\"selector-tag\">relative</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">position</span>: <span class=\"selector-tag\">absolute</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">position</span>: <span class=\"selector-tag\">fixed</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">position</span>: <span class=\"selector-tag\">sticky</span>;</span><br><span class=\"line\">// other properties...</span><br></pre></td></tr></table></figure>\n\n<p>sticky 这个属性在实验阶段，<a href=\"https://caniuse.com/?search=sticky\" target=\"_blank\" rel=\"noopener\">兼容性</a>比较差: IE/opera 不支持，FF 32+，chrome 56+，Safari 6.1+）。</p>\n<p>一个定位元素是指 postion 被计算为relative,absolute,fixed或sticky的一个元素。（注意：元素如果设置了<strong>非 none 的 transform 属性</strong>，那么它就变成了定位元素。偏移 top、bottom、left、right 只对定位元素有效。）</p>\n<ul>\n<li>相对定位元素：被计算为 relative 的元素，</li>\n<li>绝对定位元素（这是官方的说法，不同于我之前以为的区分绝对定位和固定定位）：被计算为 absolute 或 fixed 的元素，</li>\n<li>粘性定位元素：被计算为 sticky 的元素。</li>\n</ul>\n<h3 id=\"static\"><a href=\"#static\" class=\"headerlink\" title=\"static\"></a>static</h3><p>static 是默认定位，即 initial 所指定的 position 的值，此时偏移值 和z-index 都无效。</p>\n<h3 id=\"relative\"><a href=\"#relative\" class=\"headerlink\" title=\"relative\"></a>relative</h3><p>relative 是相对定位，relative 会根据它的大小给它留出固定的空间，再去做它的偏移，也就是说 relative 的偏移是在它固定留白的基础上做的，并且偏移后并不会改变它的留白和大小。</p>\n<p>position：relative 未定义在 table-*-group, table-row, table-column, table-cell, table-caption 元素上的效果。</p>\n<h3 id=\"absolute\"><a href=\"#absolute\" class=\"headerlink\" title=\"absolute\"></a>absolute</h3><p>absolute 是绝对定位，不会为元素预留空间，它相对于最近的祖先定位元素来定位，可以设置margin，并且不会被合并（相邻元素的margin-top 和 margin-bottom总是会被合并）。</p>\n<h3 id=\"fixed\"><a href=\"#fixed\" class=\"headerlink\" title=\"fixed\"></a>fixed</h3><p>fixed 是绝对定位，与 absolute 很像，只是它相对于屏幕视口 viewport 来定位，屏幕滚动的时候元素位置不变。</p>\n<h3 id=\"sticky：relative-与-fixed-的结合\"><a href=\"#sticky：relative-与-fixed-的结合\" class=\"headerlink\" title=\"sticky：relative 与 fixed 的结合\"></a>sticky：relative 与 fixed 的结合</h3><p>sticky 必须设置了偏移量（相对于屏幕视口） top/left/bottom/right 才生效，否则就和 relative 同效。在滚动到该偏移量时，采用 fixed 的定位，但当往下滚动到该元素的底部与父节点的内容（不包括 padding、margin、padding）的底部相重叠、或者往上滚动到该元素在 relative 布局下相对于父元素所在位置时，快照它当前的偏移位置，并采用 relative 定位。</p>\n<p>sticky可以用来做首字母搜索，A标题的区域内容显示时，A标题一直固定在顶部，屏幕滚动到 B区域内容时，B标题代替A一直固定在顶部。</p>\n<p><img src=\"/images/css-sticky.png\" alt=\"sticky\"></p>\n"},{"title":"手写 Promise","date":"2020-07-31T16:00:00.000Z","_content":"\n## Promise 是什么\n\nPromise 出现之前，处理异步，可以通过回调来解决，比如典型的 ajax：\n\n```javascript\najax({\n  url: 'a',\n  success: () => {\n    ajax({\n      url: 'b',\n      success: () => {\n        ajax({\n          url: 'c',\n          success: () => {}\n          fail: () => {}\n        })\n      }\n      fail: () => {}\n    })\n  },\n  error: () => {}\n})\n```\n\n还有事件监听：\n\n```javascript\nwindow.addListener('click', callback)\n```\n\n可以看到，其实回调函数在不同的使用中传入方式不一。\nPromise 最开始由社区提出，它避免了回调地狱，用法也更强大，es6 正式将 Promise 写进了规范。\n\n```javascript\najaxPromise({ url: 'a' })\n.then(res => {\n  return ajaxPromise({ url: 'b'})\n}).then(res => {\n  return ajaxPromise({ url: 'c'})\n})\n```\n\n## Promise 的用法\n\nPromise 是一个构造函数，它的实例创建如下\n\n```javascript\nvar p = new Promise(() => {})\nvar p1 = new Promise(resolve => resolve(12))\nvar p2 = new Promise((r, reject) => reject(12))\n```\n\npromise 实例总是处于下列三种状态之一，最开始 promise 是在 pending 状态，一旦它变成‘完成’或‘拒绝’，则不会再变：\n\n- 待定: pending\n- 完成: fulfilled\n- 拒绝: rejected\n\n支持以下几种实例用法和静态：\n\n```javascript\nPromise.prototype.then \nPromise.prototype.catch\nPromise.prototype.finally\n\nPromise.resolve(any) \nPromise.reject(any)  \nPromise.all([])  \nPromise.allSettled([])\nPromise.any([])  \nPromise.race([])\n```\n\n## Promise 实例方法的自定义实现\n我们先来实现几个实例方法，过去我写过但没有成功，反思一下还是对一些细节的理解不到位导致。我们看下下边这个测试脚本：\n```javascript\n// 测试用例 1\nvar a = new Promise((resolve, reject) => {\n  resolve('start');\n})\n\nvar b = a.then(() => { console.log('then 执行'); return 'thenReturnResult' });\nvar c = a.catch(() => { console.log('catch 执行'); return 'catchReturnResult' });\nvar d = a.finally(() => { console.log('finally 执行'); return 'finallyReturnResult' });\n\nconsole.log(a === b, b === c, c === d); \n// false false false\n```\n发现有一个非常重要的细节是：\n> 一个 promise 实例只能一个 then/catch/finally 函数处理，处理完后返回的都是新的 promise。\n\n写代码之前，我们先来解读一下这段代码的执行顺序，以便我们写的更加的顺滑：\n1. 立即执行 new Promise 时传入的函数，Promise 给此函数传入resolve/reject参数，并记录 then、catch、finally 的挂载情况。\n2. 使用者调用 resolve/reject，a 实例的状态被改变，触发 a.then/a.catch/a.finally 执行。\n3. a.then 挂载函数被执行，b 实例的状态被改变。\n4. a.catch 执行默认逻辑（不执行挂载函数），c 实例的状态被改变。\n5. a.finally 挂载函数被执行，d 实例的状态被改变。\n\n```javascript\nclass MyPromise {\n  status = \"pending\"; // 'pending' | 'fulfilled' | 'rejected'\n  value = undefined;\n  // 一个实例只能被一个 then/catch/finally 函数处理，所以无需用列表存储挂载函数\n  sucFn = v => v; // 成功之后执行\n  errFn = v => v; // 失败之后执行\n\n  // 立即执行，并传入 resolve/reject 函数供使用者调用\n  constructor(fn) {\n    fn(this.#resolve, this.#reject);\n  }\n\n  // 成功之后，触发 .then/.catch/.finally 执行\n  #resolve = value => {\n    if (this.status !== \"pending\") return;\n    this.status = \"fulfilled\";\n    this.value = value;\n    queueMicrotask(() => {\n      this.sucFn && this.sucFn();\n    });\n  }\n  #reject = reason => {\n    if (this.status !== \"pending\") return;\n    this.status = \"rejected\";\n    this.value = reason;\n    queueMicrotask(() => {\n      this.errFn && this.errFn();\n    });\n  }\n\n  // a.then 返回的是一个新的 Promise, 挂载的 onFulfilled|onRejected 需要在 a 的状态变化后执行\n  then = (onFulfilled, onRejected) => {\n    return new MyPromise((resolve, reject) => {\n      this.sucFn = () => {\n        // 如果没传，就透传当前promise状态和值；否则执行 onFulfilled\n        if (!onFulfilled) {\n          return this.status === \"fulfilled\"\n            ? resolve(this.value)\n            : reject(this.value);\n        }\n        try {\n          resolve(onFulfilled(this.value));\n        } catch (e) {\n          reject(e);\n        }\n      };\n      this.errFn = () => {};\n    });\n  }\n  catch = (onRejected) => {}\n  finally = (callback) => {}\n}\n```\n这里实现了一部分 then 的逻辑，catch、finally 的逻辑是类似的，读者可以自己尝试写一下。\n\n### Promise 静态方法实现全代码\n```javascript\nclass MyPromise {\n  status = \"pending\"; // 'pending' | 'fulfilled' | 'rejected'\n  value = undefined;\n\n  constructor(fn) {\n    try {\n      fn(this.#resolve, this.#reject);\n    } catch (e) {\n      this.#reject(e);\n    }\n  }\n\n  #resolve = (value) => {\n    if (this.status !== \"pending\") return;\n    this.status = \"fulfilled\";\n    this.value = value;\n    queueMicrotask(() => {\n      this.sucFn && this.sucFn();\n    });\n  };\n  #reject = (reason) => {\n    if (this.status !== \"pending\") return;\n    this.status = \"rejected\";\n    this.value = reason;\n    queueMicrotask(() => {\n      this.errFn && this.errFn();\n    });\n  };\n\n  #callbackCatch = (fn, resolve, reject) => () => {\n    if (!fn) {\n      // 如果不传入，就透传当前promise状态\n      return this.status === \"fulfilled\"\n        ? resolve(this.value)\n        : reject(this.value);\n    }\n    try {\n      resolve(fn(this.value));\n    } catch (e) {\n      reject(e);\n    }\n  };\n\n  then = (onFulfilled, onRejected) => {\n    // then 返回的是一个新的 Promise\n    return new MyPromise((resolve, reject) => {\n      this.sucFn = this.#callbackCatch(onFulfilled, resolve, reject);\n      this.errFn = this.#callbackCatch(onRejected, resolve, reject);\n    });\n  };\n\n  catch = (onRejected) => {\n    return new MyPromise((resolve, reject) => {\n      // 如果上一个 promise 是成功的，被 catch 时依然要把成功的结果透传\n      this.sucFn = this.#callbackCatch((v) => v, resolve, reject);\n      this.errFn = this.#callbackCatch(onRejected, resolve, reject);\n    });\n  };\n\n  finally = (callback) => {\n    return new MyPromise((resolve, reject) => {\n      // 正常情况下 finally 要把上一个 promise 的状态和结果透传\n      // 只有一种特殊情况：如果finally内部抛错，状态仍需要变更为 rejected\n      this.sucFn = this.#callbackCatch(\n        () => callback(),\n        () => resolve(this.value),\n        reject\n      );\n      this.errFn = this.#callbackCatch(\n        () => callback(),\n        () => resolve(this.value),\n        reject\n      );\n    });\n  };\n}\n```\n\n再用以下脚本来测试一下结果，看看与Promise是否一致：\n```javascript\nvar a = new MyPromise((resolve, reject) => {\n  console.log(2);  // 2\n  setTimeout(() => {\n    resolve('start');\n  }, 0);\n})\n  .then((res) => {\n    console.log('then1', res);  // then1 start\n    return 'then1Res';\n  })\n  .catch((e) => {\n    console.log('catch1', e);\n    throw 'catch1Throw';\n  })\n  .then(\n    (res) => {\n        console.log('then2', res);   // then2 then1Res\n        throw 'then2Throw';\n    },\n    (err) => {\n      console.log('then2Catch', err);\n      throw 'then2CatchThrow';\n    }\n  )\n  .catch((e) => {\n    console.log('catch2', e);  // catch2 then2Throw\n    return 'catch2Res';\n  })\n  .then((res) => {\n    console.log('then3', res); // then3 catch2Res\n    return 'then3Res';\n  })\n  .finally((res) => {\n    console.log('finally11111', res);  // finally11111 undefined\n  })\n  .finally((res) => {\n    console.log('finally22222', res);  // finally22222 undefined\n    return 'finally22222';\n  })\n  .then(\n    (res) => {\n        console.log('then4', res);   // then4 then3Res\n        return 'then4Res';\n    },\n    (err) => {\n      console.log('thenCatch', err);\n      return 'thenCatchThrow';\n    }\n  )\n  .finally(() => {\n    console.log('finally33333');  // finally33333\n    throw 'finally3Throw';\n  })\n  .then((res) => {\n    console.log('then5', res);\n    throw 'then5Throw';\n  })\n  .catch((e) => {\n    console.log('catch4', e);  // catch4 finally3Throw\n    return 'catch4Res';\n  });\n```\n完全一致（图就不贴了，读者可以自行执行以下），perfect。\n\n## Promise 静态方法的自定义实现\n\n当实例方法实现好之后，静态方法就显得比较轻松了，大家只要理解了这几个函数的执行细节，就会好些很多。\n先来一段测试脚本，先来看看 resolve、reject 静态方法的表现\n\n```javascript\nvar sucFn = () => new Promise((resolve, reject) => resolve('111'));\nvar errFn = () => new Promise((resolve, reject) => reject('222'));\nvar pendingFn = () => new Promise((resolve, reject) => setTimeout(() => resolve('333'), 1000));\n\nvar a = errFn();\nvar b = Promise.resolve(a);\nconsole.log(a === b); // true\n\nvar a = pendingFn();\nvar b = Promise.resolve(a); \nvar c = Promise.resolve(Promise.resolve(a)); \nconsole.log(a === b); // true\n\nvar a = sucFn();\nvar b = Promise.resolve(a);\nconsole.log(a === b); // true\n\nvar a = sucFn();\nvar b = Promise.reject(a);  // b.status => 'fulfilled', b.value => '222'\nconsole.log(a === b); // false\n\nvar a = errFn();\nvar b = Promise.reject(a);  // b.status => 'rejected', b.value => Promise<rejected, '222'>\nconsole.log(a === b); // false\n\nvar a = pendingFn();\nvar b = Promise.reject(a);  // b.status => 'rejected', b.value => Promise<pending, '222'>\nconsole.log(a === b); // false\n\n```\n从执行结果我们来解读一下：\n1. Promise.resolve 传入的参数如果是promise实例，则透传该实例的状态及结果；否则 fulfilled 并传出参数本身\n2. Promise.reject 传入的参数如果是promise实例且被 fulfilled，则 rejected 并传出该实例的结果；否则 reject 并传出参数本身\n\n比较简单，就直接放代码了。\n```javascript\nMyPromise.resolve = (value) => {\n  // 如果 value 是 promise 实例，透传实例即可；否则返回成功态\n  if (value instanceof MyPromise) return value;\n  return new MyPromise((resolve) => resolve(value));\n};\nMyPromise.reject = (value) => {\n  return new MyPromise((resolve, reject) => {\n    // 如果 value 是 promise 实例且是成功的，reject 该实例的值；否则reject value本身\n    MyPromise.resolve(value)\n      .then((v) => reject(v))\n      .catch(() => reject(value));\n  });\n};\n```\n\n至于 all/allSettled/race/any，我们再来几个测试案例：\n\n``` javascript\nvar a = Promise.all([1,2,3].map(v => {\n  return v === 3 ? new Promise((x) => { setTimeout(() => { console.log(123); x(v) }, 1000)}) : Promise.resolve(v);\n}))\nsetTimeout(() => console.log(a), 0); // Promise<pending>  \nsetTimeout(() => console.log(a), 1000) // Promise<fulfilled, [1,2,3]>\n\nvar b = Promise.allSettled([1,2,3].map(v => {\n  return v === 3 ? new Promise((resolve,reject) => { setTimeout(() => { console.log(123); reject(v) }, 1000)}) : Promise.resolve(v);\n}))\nsetTimeout(() => console.log(b), 0); // Promise<pending>  \nsetTimeout(() => console.log(b), 1000) // Promise<fulfilled, [{status: 'fulfilled', value: 1},{status: 'fulfilled', value: 2},{status: 'rejected', reason: 3}]>\n\nvar c = Promise.any([1,2,3].map(v => {\n  return v === 3 ? Promise.reject(v) : new Promise((resolve, reject) => { setTimeout(() => { console.log(123); resolve(v) }, 1000)});\n}));\nsetTimeout(() => console.log(c), 0); // Promise<pending>  \nsetTimeout(() => console.log(c), 1000) // Promise<fulfilled, 1>\n\nvar d = Promise.race([1,2,3].map(v => {\n  return v === 3 ? Promise.reject(v) : new Promise((resolve, reject) => { setTimeout(() => { console.log(123); resolve(v) }, 1000)});\n}));\nsetTimeout(() => console.log(d), 0); // Promise<rejected, 3>  \nsetTimeout(() => console.log(d), 1000) // Promise<rejected, 3>\n\n```\n解读一下:\n- Promise.all([]) ，所有元素都被 fulfilled 才成功；任一 rejected 就 rejected；否则 pending\n- Promise.allSettled([]) ，所有元素都被 fulfilled 或 rejected 才成功；否则 pending\n- Promise.any([]) ，任一元素被 fulfilled 才成功; 所有 rejected 才 rejected；否则 pending\n- Promise.race([]) ，任一元素被 fulfilled 或 rejected 立即返回它的结果；否则 pending\n\n搞清楚他们的状态流转之后，代码逻辑就比较清晰了，这里直接看代码：\n\n``` javascript\nMyPromise.all = (list) => {\n  return new MyPromise((resolve, reject) => {\n    let result = [];\n    let count = 0;\n    list.forEach((item, index) => {\n      MyPromise.resolve(item)\n        .then((res) => {\n          result[index] = res;\n          count += 1;\n        })\n        .catch((err) => reject(err))\n        .finally(() => {\n          // 如果存在失败或 pending 中的实例，什么都不做\n          if (count !== list.length) return;\n          resolve(result);\n        });\n    });\n  });\n};\nMyPromise.allSettled = (list) => {\n  return new MyPromise((resolve, reject) => {\n    let result = [];\n    let count = 0;\n    list.forEach((item, index) => {\n      MyPromise.resolve(item)\n        .then((res) => {\n          result[index] = { status: \"fulfilled\", value: res };\n          count += 1;\n        })\n        .catch((err) => {\n          result[index] = { status: \"rejected\", reason: err };\n          count += 1; // 一定要放在 result[index] 赋值后边，避免count自增后finally在赋值之前执行\n        })\n        .finally(() => {\n          // 如果存在 pending 中的实例，什么都不做\n          if (count !== list.length) return;\n          resolve(result);\n        });\n    });\n  });\n};\nMyPromise.any = (list) => {\n  return new MyPromise((resolve) => {\n    let result = [];\n    let count = 0;\n    list.forEach((item) => {\n      MyPromise.resolve(item)\n        .then((res) => {\n          resolve(res);\n        })\n        .catch((err) => {\n          result[index] = err;\n          count += 0;\n        })\n        .finally(() => {\n          if (count !== list.length) return;\n          throw new Error({\n            stack: \"AggregateError: All promises were rejected\",\n            message: \"All promises were rejected\",\n            errors: result,\n          });\n        });\n    });\n  });\n};\nMyPromise.race = (list) => {\n  return new MyPromise((resolve, reject) => {\n    list.forEach((item) => {\n      MyPromise.resolve(item)\n        .then((res) => resolve(res))\n        .catch((err) => reject(err));\n    });\n  });\n};\n```\n\n至此，MyPromise 就写完了，感谢各位读者耐心观看，如有帮助不胜荣幸。","source":"_posts/javascript/promise.md","raw":"---\ntitle: 手写 Promise\ndate: 2020-08-01\ntags: Javascript\n---\n\n## Promise 是什么\n\nPromise 出现之前，处理异步，可以通过回调来解决，比如典型的 ajax：\n\n```javascript\najax({\n  url: 'a',\n  success: () => {\n    ajax({\n      url: 'b',\n      success: () => {\n        ajax({\n          url: 'c',\n          success: () => {}\n          fail: () => {}\n        })\n      }\n      fail: () => {}\n    })\n  },\n  error: () => {}\n})\n```\n\n还有事件监听：\n\n```javascript\nwindow.addListener('click', callback)\n```\n\n可以看到，其实回调函数在不同的使用中传入方式不一。\nPromise 最开始由社区提出，它避免了回调地狱，用法也更强大，es6 正式将 Promise 写进了规范。\n\n```javascript\najaxPromise({ url: 'a' })\n.then(res => {\n  return ajaxPromise({ url: 'b'})\n}).then(res => {\n  return ajaxPromise({ url: 'c'})\n})\n```\n\n## Promise 的用法\n\nPromise 是一个构造函数，它的实例创建如下\n\n```javascript\nvar p = new Promise(() => {})\nvar p1 = new Promise(resolve => resolve(12))\nvar p2 = new Promise((r, reject) => reject(12))\n```\n\npromise 实例总是处于下列三种状态之一，最开始 promise 是在 pending 状态，一旦它变成‘完成’或‘拒绝’，则不会再变：\n\n- 待定: pending\n- 完成: fulfilled\n- 拒绝: rejected\n\n支持以下几种实例用法和静态：\n\n```javascript\nPromise.prototype.then \nPromise.prototype.catch\nPromise.prototype.finally\n\nPromise.resolve(any) \nPromise.reject(any)  \nPromise.all([])  \nPromise.allSettled([])\nPromise.any([])  \nPromise.race([])\n```\n\n## Promise 实例方法的自定义实现\n我们先来实现几个实例方法，过去我写过但没有成功，反思一下还是对一些细节的理解不到位导致。我们看下下边这个测试脚本：\n```javascript\n// 测试用例 1\nvar a = new Promise((resolve, reject) => {\n  resolve('start');\n})\n\nvar b = a.then(() => { console.log('then 执行'); return 'thenReturnResult' });\nvar c = a.catch(() => { console.log('catch 执行'); return 'catchReturnResult' });\nvar d = a.finally(() => { console.log('finally 执行'); return 'finallyReturnResult' });\n\nconsole.log(a === b, b === c, c === d); \n// false false false\n```\n发现有一个非常重要的细节是：\n> 一个 promise 实例只能一个 then/catch/finally 函数处理，处理完后返回的都是新的 promise。\n\n写代码之前，我们先来解读一下这段代码的执行顺序，以便我们写的更加的顺滑：\n1. 立即执行 new Promise 时传入的函数，Promise 给此函数传入resolve/reject参数，并记录 then、catch、finally 的挂载情况。\n2. 使用者调用 resolve/reject，a 实例的状态被改变，触发 a.then/a.catch/a.finally 执行。\n3. a.then 挂载函数被执行，b 实例的状态被改变。\n4. a.catch 执行默认逻辑（不执行挂载函数），c 实例的状态被改变。\n5. a.finally 挂载函数被执行，d 实例的状态被改变。\n\n```javascript\nclass MyPromise {\n  status = \"pending\"; // 'pending' | 'fulfilled' | 'rejected'\n  value = undefined;\n  // 一个实例只能被一个 then/catch/finally 函数处理，所以无需用列表存储挂载函数\n  sucFn = v => v; // 成功之后执行\n  errFn = v => v; // 失败之后执行\n\n  // 立即执行，并传入 resolve/reject 函数供使用者调用\n  constructor(fn) {\n    fn(this.#resolve, this.#reject);\n  }\n\n  // 成功之后，触发 .then/.catch/.finally 执行\n  #resolve = value => {\n    if (this.status !== \"pending\") return;\n    this.status = \"fulfilled\";\n    this.value = value;\n    queueMicrotask(() => {\n      this.sucFn && this.sucFn();\n    });\n  }\n  #reject = reason => {\n    if (this.status !== \"pending\") return;\n    this.status = \"rejected\";\n    this.value = reason;\n    queueMicrotask(() => {\n      this.errFn && this.errFn();\n    });\n  }\n\n  // a.then 返回的是一个新的 Promise, 挂载的 onFulfilled|onRejected 需要在 a 的状态变化后执行\n  then = (onFulfilled, onRejected) => {\n    return new MyPromise((resolve, reject) => {\n      this.sucFn = () => {\n        // 如果没传，就透传当前promise状态和值；否则执行 onFulfilled\n        if (!onFulfilled) {\n          return this.status === \"fulfilled\"\n            ? resolve(this.value)\n            : reject(this.value);\n        }\n        try {\n          resolve(onFulfilled(this.value));\n        } catch (e) {\n          reject(e);\n        }\n      };\n      this.errFn = () => {};\n    });\n  }\n  catch = (onRejected) => {}\n  finally = (callback) => {}\n}\n```\n这里实现了一部分 then 的逻辑，catch、finally 的逻辑是类似的，读者可以自己尝试写一下。\n\n### Promise 静态方法实现全代码\n```javascript\nclass MyPromise {\n  status = \"pending\"; // 'pending' | 'fulfilled' | 'rejected'\n  value = undefined;\n\n  constructor(fn) {\n    try {\n      fn(this.#resolve, this.#reject);\n    } catch (e) {\n      this.#reject(e);\n    }\n  }\n\n  #resolve = (value) => {\n    if (this.status !== \"pending\") return;\n    this.status = \"fulfilled\";\n    this.value = value;\n    queueMicrotask(() => {\n      this.sucFn && this.sucFn();\n    });\n  };\n  #reject = (reason) => {\n    if (this.status !== \"pending\") return;\n    this.status = \"rejected\";\n    this.value = reason;\n    queueMicrotask(() => {\n      this.errFn && this.errFn();\n    });\n  };\n\n  #callbackCatch = (fn, resolve, reject) => () => {\n    if (!fn) {\n      // 如果不传入，就透传当前promise状态\n      return this.status === \"fulfilled\"\n        ? resolve(this.value)\n        : reject(this.value);\n    }\n    try {\n      resolve(fn(this.value));\n    } catch (e) {\n      reject(e);\n    }\n  };\n\n  then = (onFulfilled, onRejected) => {\n    // then 返回的是一个新的 Promise\n    return new MyPromise((resolve, reject) => {\n      this.sucFn = this.#callbackCatch(onFulfilled, resolve, reject);\n      this.errFn = this.#callbackCatch(onRejected, resolve, reject);\n    });\n  };\n\n  catch = (onRejected) => {\n    return new MyPromise((resolve, reject) => {\n      // 如果上一个 promise 是成功的，被 catch 时依然要把成功的结果透传\n      this.sucFn = this.#callbackCatch((v) => v, resolve, reject);\n      this.errFn = this.#callbackCatch(onRejected, resolve, reject);\n    });\n  };\n\n  finally = (callback) => {\n    return new MyPromise((resolve, reject) => {\n      // 正常情况下 finally 要把上一个 promise 的状态和结果透传\n      // 只有一种特殊情况：如果finally内部抛错，状态仍需要变更为 rejected\n      this.sucFn = this.#callbackCatch(\n        () => callback(),\n        () => resolve(this.value),\n        reject\n      );\n      this.errFn = this.#callbackCatch(\n        () => callback(),\n        () => resolve(this.value),\n        reject\n      );\n    });\n  };\n}\n```\n\n再用以下脚本来测试一下结果，看看与Promise是否一致：\n```javascript\nvar a = new MyPromise((resolve, reject) => {\n  console.log(2);  // 2\n  setTimeout(() => {\n    resolve('start');\n  }, 0);\n})\n  .then((res) => {\n    console.log('then1', res);  // then1 start\n    return 'then1Res';\n  })\n  .catch((e) => {\n    console.log('catch1', e);\n    throw 'catch1Throw';\n  })\n  .then(\n    (res) => {\n        console.log('then2', res);   // then2 then1Res\n        throw 'then2Throw';\n    },\n    (err) => {\n      console.log('then2Catch', err);\n      throw 'then2CatchThrow';\n    }\n  )\n  .catch((e) => {\n    console.log('catch2', e);  // catch2 then2Throw\n    return 'catch2Res';\n  })\n  .then((res) => {\n    console.log('then3', res); // then3 catch2Res\n    return 'then3Res';\n  })\n  .finally((res) => {\n    console.log('finally11111', res);  // finally11111 undefined\n  })\n  .finally((res) => {\n    console.log('finally22222', res);  // finally22222 undefined\n    return 'finally22222';\n  })\n  .then(\n    (res) => {\n        console.log('then4', res);   // then4 then3Res\n        return 'then4Res';\n    },\n    (err) => {\n      console.log('thenCatch', err);\n      return 'thenCatchThrow';\n    }\n  )\n  .finally(() => {\n    console.log('finally33333');  // finally33333\n    throw 'finally3Throw';\n  })\n  .then((res) => {\n    console.log('then5', res);\n    throw 'then5Throw';\n  })\n  .catch((e) => {\n    console.log('catch4', e);  // catch4 finally3Throw\n    return 'catch4Res';\n  });\n```\n完全一致（图就不贴了，读者可以自行执行以下），perfect。\n\n## Promise 静态方法的自定义实现\n\n当实例方法实现好之后，静态方法就显得比较轻松了，大家只要理解了这几个函数的执行细节，就会好些很多。\n先来一段测试脚本，先来看看 resolve、reject 静态方法的表现\n\n```javascript\nvar sucFn = () => new Promise((resolve, reject) => resolve('111'));\nvar errFn = () => new Promise((resolve, reject) => reject('222'));\nvar pendingFn = () => new Promise((resolve, reject) => setTimeout(() => resolve('333'), 1000));\n\nvar a = errFn();\nvar b = Promise.resolve(a);\nconsole.log(a === b); // true\n\nvar a = pendingFn();\nvar b = Promise.resolve(a); \nvar c = Promise.resolve(Promise.resolve(a)); \nconsole.log(a === b); // true\n\nvar a = sucFn();\nvar b = Promise.resolve(a);\nconsole.log(a === b); // true\n\nvar a = sucFn();\nvar b = Promise.reject(a);  // b.status => 'fulfilled', b.value => '222'\nconsole.log(a === b); // false\n\nvar a = errFn();\nvar b = Promise.reject(a);  // b.status => 'rejected', b.value => Promise<rejected, '222'>\nconsole.log(a === b); // false\n\nvar a = pendingFn();\nvar b = Promise.reject(a);  // b.status => 'rejected', b.value => Promise<pending, '222'>\nconsole.log(a === b); // false\n\n```\n从执行结果我们来解读一下：\n1. Promise.resolve 传入的参数如果是promise实例，则透传该实例的状态及结果；否则 fulfilled 并传出参数本身\n2. Promise.reject 传入的参数如果是promise实例且被 fulfilled，则 rejected 并传出该实例的结果；否则 reject 并传出参数本身\n\n比较简单，就直接放代码了。\n```javascript\nMyPromise.resolve = (value) => {\n  // 如果 value 是 promise 实例，透传实例即可；否则返回成功态\n  if (value instanceof MyPromise) return value;\n  return new MyPromise((resolve) => resolve(value));\n};\nMyPromise.reject = (value) => {\n  return new MyPromise((resolve, reject) => {\n    // 如果 value 是 promise 实例且是成功的，reject 该实例的值；否则reject value本身\n    MyPromise.resolve(value)\n      .then((v) => reject(v))\n      .catch(() => reject(value));\n  });\n};\n```\n\n至于 all/allSettled/race/any，我们再来几个测试案例：\n\n``` javascript\nvar a = Promise.all([1,2,3].map(v => {\n  return v === 3 ? new Promise((x) => { setTimeout(() => { console.log(123); x(v) }, 1000)}) : Promise.resolve(v);\n}))\nsetTimeout(() => console.log(a), 0); // Promise<pending>  \nsetTimeout(() => console.log(a), 1000) // Promise<fulfilled, [1,2,3]>\n\nvar b = Promise.allSettled([1,2,3].map(v => {\n  return v === 3 ? new Promise((resolve,reject) => { setTimeout(() => { console.log(123); reject(v) }, 1000)}) : Promise.resolve(v);\n}))\nsetTimeout(() => console.log(b), 0); // Promise<pending>  \nsetTimeout(() => console.log(b), 1000) // Promise<fulfilled, [{status: 'fulfilled', value: 1},{status: 'fulfilled', value: 2},{status: 'rejected', reason: 3}]>\n\nvar c = Promise.any([1,2,3].map(v => {\n  return v === 3 ? Promise.reject(v) : new Promise((resolve, reject) => { setTimeout(() => { console.log(123); resolve(v) }, 1000)});\n}));\nsetTimeout(() => console.log(c), 0); // Promise<pending>  \nsetTimeout(() => console.log(c), 1000) // Promise<fulfilled, 1>\n\nvar d = Promise.race([1,2,3].map(v => {\n  return v === 3 ? Promise.reject(v) : new Promise((resolve, reject) => { setTimeout(() => { console.log(123); resolve(v) }, 1000)});\n}));\nsetTimeout(() => console.log(d), 0); // Promise<rejected, 3>  \nsetTimeout(() => console.log(d), 1000) // Promise<rejected, 3>\n\n```\n解读一下:\n- Promise.all([]) ，所有元素都被 fulfilled 才成功；任一 rejected 就 rejected；否则 pending\n- Promise.allSettled([]) ，所有元素都被 fulfilled 或 rejected 才成功；否则 pending\n- Promise.any([]) ，任一元素被 fulfilled 才成功; 所有 rejected 才 rejected；否则 pending\n- Promise.race([]) ，任一元素被 fulfilled 或 rejected 立即返回它的结果；否则 pending\n\n搞清楚他们的状态流转之后，代码逻辑就比较清晰了，这里直接看代码：\n\n``` javascript\nMyPromise.all = (list) => {\n  return new MyPromise((resolve, reject) => {\n    let result = [];\n    let count = 0;\n    list.forEach((item, index) => {\n      MyPromise.resolve(item)\n        .then((res) => {\n          result[index] = res;\n          count += 1;\n        })\n        .catch((err) => reject(err))\n        .finally(() => {\n          // 如果存在失败或 pending 中的实例，什么都不做\n          if (count !== list.length) return;\n          resolve(result);\n        });\n    });\n  });\n};\nMyPromise.allSettled = (list) => {\n  return new MyPromise((resolve, reject) => {\n    let result = [];\n    let count = 0;\n    list.forEach((item, index) => {\n      MyPromise.resolve(item)\n        .then((res) => {\n          result[index] = { status: \"fulfilled\", value: res };\n          count += 1;\n        })\n        .catch((err) => {\n          result[index] = { status: \"rejected\", reason: err };\n          count += 1; // 一定要放在 result[index] 赋值后边，避免count自增后finally在赋值之前执行\n        })\n        .finally(() => {\n          // 如果存在 pending 中的实例，什么都不做\n          if (count !== list.length) return;\n          resolve(result);\n        });\n    });\n  });\n};\nMyPromise.any = (list) => {\n  return new MyPromise((resolve) => {\n    let result = [];\n    let count = 0;\n    list.forEach((item) => {\n      MyPromise.resolve(item)\n        .then((res) => {\n          resolve(res);\n        })\n        .catch((err) => {\n          result[index] = err;\n          count += 0;\n        })\n        .finally(() => {\n          if (count !== list.length) return;\n          throw new Error({\n            stack: \"AggregateError: All promises were rejected\",\n            message: \"All promises were rejected\",\n            errors: result,\n          });\n        });\n    });\n  });\n};\nMyPromise.race = (list) => {\n  return new MyPromise((resolve, reject) => {\n    list.forEach((item) => {\n      MyPromise.resolve(item)\n        .then((res) => resolve(res))\n        .catch((err) => reject(err));\n    });\n  });\n};\n```\n\n至此，MyPromise 就写完了，感谢各位读者耐心观看，如有帮助不胜荣幸。","slug":"javascript/promise","published":1,"updated":"2023-02-23T07:18:21.564Z","_id":"clegss0560006jvoamoib6y1z","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"Promise-是什么\"><a href=\"#Promise-是什么\" class=\"headerlink\" title=\"Promise 是什么\"></a>Promise 是什么</h2><p>Promise 出现之前，处理异步，可以通过回调来解决，比如典型的 ajax：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ajax(&#123;</span><br><span class=\"line\">  url: <span class=\"string\">'a'</span>,</span><br><span class=\"line\">  success: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    ajax(&#123;</span><br><span class=\"line\">      url: <span class=\"string\">'b'</span>,</span><br><span class=\"line\">      success: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        ajax(&#123;</span><br><span class=\"line\">          url: <span class=\"string\">'c'</span>,</span><br><span class=\"line\">          success: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;&#125;</span><br><span class=\"line\">          fail: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;&#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      fail: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;&#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  error: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;&#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>还有事件监听：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.addListener(<span class=\"string\">'click'</span>, callback)</span><br></pre></td></tr></table></figure>\n\n<p>可以看到，其实回调函数在不同的使用中传入方式不一。<br>Promise 最开始由社区提出，它避免了回调地狱，用法也更强大，es6 正式将 Promise 写进了规范。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ajaxPromise(&#123; <span class=\"attr\">url</span>: <span class=\"string\">'a'</span> &#125;)</span><br><span class=\"line\">.then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> ajaxPromise(&#123; <span class=\"attr\">url</span>: <span class=\"string\">'b'</span>&#125;)</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> ajaxPromise(&#123; <span class=\"attr\">url</span>: <span class=\"string\">'c'</span>&#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Promise-的用法\"><a href=\"#Promise-的用法\" class=\"headerlink\" title=\"Promise 的用法\"></a>Promise 的用法</h2><p>Promise 是一个构造函数，它的实例创建如下</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;&#125;)</span><br><span class=\"line\"><span class=\"keyword\">var</span> p1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> resolve(<span class=\"number\">12</span>))</span><br><span class=\"line\"><span class=\"keyword\">var</span> p2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">r, reject</span>) =&gt;</span> reject(<span class=\"number\">12</span>))</span><br></pre></td></tr></table></figure>\n\n<p>promise 实例总是处于下列三种状态之一，最开始 promise 是在 pending 状态，一旦它变成‘完成’或‘拒绝’，则不会再变：</p>\n<ul>\n<li>待定: pending</li>\n<li>完成: fulfilled</li>\n<li>拒绝: rejected</li>\n</ul>\n<p>支持以下几种实例用法和静态：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Promise</span>.prototype.then </span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.prototype.catch</span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.prototype.finally</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.resolve(any) </span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.reject(any)  </span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.all([])  </span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.allSettled([])</span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.any([])  </span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.race([])</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Promise-实例方法的自定义实现\"><a href=\"#Promise-实例方法的自定义实现\" class=\"headerlink\" title=\"Promise 实例方法的自定义实现\"></a>Promise 实例方法的自定义实现</h2><p>我们先来实现几个实例方法，过去我写过但没有成功，反思一下还是对一些细节的理解不到位导致。我们看下下边这个测试脚本：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 测试用例 1</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  resolve(<span class=\"string\">'start'</span>);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> b = a.then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123; <span class=\"built_in\">console</span>.log(<span class=\"string\">'then 执行'</span>); <span class=\"keyword\">return</span> <span class=\"string\">'thenReturnResult'</span> &#125;);</span><br><span class=\"line\"><span class=\"keyword\">var</span> c = a.catch(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123; <span class=\"built_in\">console</span>.log(<span class=\"string\">'catch 执行'</span>); <span class=\"keyword\">return</span> <span class=\"string\">'catchReturnResult'</span> &#125;);</span><br><span class=\"line\"><span class=\"keyword\">var</span> d = a.finally(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123; <span class=\"built_in\">console</span>.log(<span class=\"string\">'finally 执行'</span>); <span class=\"keyword\">return</span> <span class=\"string\">'finallyReturnResult'</span> &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a === b, b === c, c === d); </span><br><span class=\"line\"><span class=\"comment\">// false false false</span></span><br></pre></td></tr></table></figure>\n\n<p>发现有一个非常重要的细节是：</p>\n<blockquote>\n<p>一个 promise 实例只能一个 then/catch/finally 函数处理，处理完后返回的都是新的 promise。</p>\n</blockquote>\n<p>写代码之前，我们先来解读一下这段代码的执行顺序，以便我们写的更加的顺滑：</p>\n<ol>\n<li>立即执行 new Promise 时传入的函数，Promise 给此函数传入resolve/reject参数，并记录 then、catch、finally 的挂载情况。</li>\n<li>使用者调用 resolve/reject，a 实例的状态被改变，触发 a.then/a.catch/a.finally 执行。</li>\n<li>a.then 挂载函数被执行，b 实例的状态被改变。</li>\n<li>a.catch 执行默认逻辑（不执行挂载函数），c 实例的状态被改变。</li>\n<li>a.finally 挂载函数被执行，d 实例的状态被改变。</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyPromise</span> </span>&#123;</span><br><span class=\"line\">  status = <span class=\"string\">\"pending\"</span>; <span class=\"comment\">// 'pending' | 'fulfilled' | 'rejected'</span></span><br><span class=\"line\">  value = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 一个实例只能被一个 then/catch/finally 函数处理，所以无需用列表存储挂载函数</span></span><br><span class=\"line\">  sucFn = <span class=\"function\"><span class=\"params\">v</span> =&gt;</span> v; <span class=\"comment\">// 成功之后执行</span></span><br><span class=\"line\">  errFn = <span class=\"function\"><span class=\"params\">v</span> =&gt;</span> v; <span class=\"comment\">// 失败之后执行</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 立即执行，并传入 resolve/reject 函数供使用者调用</span></span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(fn) &#123;</span><br><span class=\"line\">    fn(this.#resolve, this.#reject);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 成功之后，触发 .then/.catch/.finally 执行</span></span><br><span class=\"line\">  #resolve = value =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.status !== <span class=\"string\">\"pending\"</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.status = <span class=\"string\">\"fulfilled\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.value = value;</span><br><span class=\"line\">    queueMicrotask(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.sucFn &amp;&amp; <span class=\"keyword\">this</span>.sucFn();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  #reject = reason =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.status !== <span class=\"string\">\"pending\"</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.status = <span class=\"string\">\"rejected\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.value = reason;</span><br><span class=\"line\">    queueMicrotask(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.errFn &amp;&amp; <span class=\"keyword\">this</span>.errFn();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// a.then 返回的是一个新的 Promise, 挂载的 onFulfilled|onRejected 需要在 a 的状态变化后执行</span></span><br><span class=\"line\">  then = <span class=\"function\">(<span class=\"params\">onFulfilled, onRejected</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MyPromise(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.sucFn = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果没传，就透传当前promise状态和值；否则执行 onFulfilled</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!onFulfilled) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.status === <span class=\"string\">\"fulfilled\"</span></span><br><span class=\"line\">            ? resolve(<span class=\"keyword\">this</span>.value)</span><br><span class=\"line\">            : reject(<span class=\"keyword\">this</span>.value);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">          resolve(onFulfilled(<span class=\"keyword\">this</span>.value));</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">          reject(e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.errFn = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;&#125;;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">catch</span> = <span class=\"function\">(<span class=\"params\">onRejected</span>) =&gt;</span> &#123;&#125;</span><br><span class=\"line\">  <span class=\"keyword\">finally</span> = <span class=\"function\">(<span class=\"params\">callback</span>) =&gt;</span> &#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里实现了一部分 then 的逻辑，catch、finally 的逻辑是类似的，读者可以自己尝试写一下。</p>\n<h3 id=\"Promise-静态方法实现全代码\"><a href=\"#Promise-静态方法实现全代码\" class=\"headerlink\" title=\"Promise 静态方法实现全代码\"></a>Promise 静态方法实现全代码</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyPromise</span> </span>&#123;</span><br><span class=\"line\">  status = <span class=\"string\">\"pending\"</span>; <span class=\"comment\">// 'pending' | 'fulfilled' | 'rejected'</span></span><br><span class=\"line\">  value = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(fn) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      fn(this.#resolve, this.#reject);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">      this.#reject(e);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  #resolve = (value) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.status !== <span class=\"string\">\"pending\"</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.status = <span class=\"string\">\"fulfilled\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.value = value;</span><br><span class=\"line\">    queueMicrotask(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.sucFn &amp;&amp; <span class=\"keyword\">this</span>.sucFn();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  #reject = (reason) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.status !== <span class=\"string\">\"pending\"</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.status = <span class=\"string\">\"rejected\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.value = reason;</span><br><span class=\"line\">    queueMicrotask(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.errFn &amp;&amp; <span class=\"keyword\">this</span>.errFn();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  #callbackCatch = (fn, resolve, reject) =&gt; () =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!fn) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 如果不传入，就透传当前promise状态</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.status === <span class=\"string\">\"fulfilled\"</span></span><br><span class=\"line\">        ? resolve(<span class=\"keyword\">this</span>.value)</span><br><span class=\"line\">        : reject(<span class=\"keyword\">this</span>.value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      resolve(fn(<span class=\"keyword\">this</span>.value));</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">      reject(e);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  then = <span class=\"function\">(<span class=\"params\">onFulfilled, onRejected</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// then 返回的是一个新的 Promise</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MyPromise(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      this.sucFn = this.#callbackCatch(onFulfilled, resolve, reject);</span><br><span class=\"line\">      this.errFn = this.#callbackCatch(onRejected, resolve, reject);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">catch</span> = <span class=\"function\">(<span class=\"params\">onRejected</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MyPromise(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 如果上一个 promise 是成功的，被 catch 时依然要把成功的结果透传</span></span><br><span class=\"line\">      this.sucFn = this.#callbackCatch((v) =&gt; v, resolve, reject);</span><br><span class=\"line\">      this.errFn = this.#callbackCatch(onRejected, resolve, reject);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">finally</span> = <span class=\"function\">(<span class=\"params\">callback</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MyPromise(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 正常情况下 finally 要把上一个 promise 的状态和结果透传</span></span><br><span class=\"line\">      <span class=\"comment\">// 只有一种特殊情况：如果finally内部抛错，状态仍需要变更为 rejected</span></span><br><span class=\"line\">      this.sucFn = this.#callbackCatch(</span><br><span class=\"line\">        () =&gt; callback(),</span><br><span class=\"line\">        () =&gt; resolve(<span class=\"keyword\">this</span>.value),</span><br><span class=\"line\">        reject</span><br><span class=\"line\">      );</span><br><span class=\"line\">      this.errFn = this.#callbackCatch(</span><br><span class=\"line\">        () =&gt; callback(),</span><br><span class=\"line\">        () =&gt; resolve(<span class=\"keyword\">this</span>.value),</span><br><span class=\"line\">        reject</span><br><span class=\"line\">      );</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>再用以下脚本来测试一下结果，看看与Promise是否一致：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"keyword\">new</span> MyPromise(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>);  <span class=\"comment\">// 2</span></span><br><span class=\"line\">  setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    resolve(<span class=\"string\">'start'</span>);</span><br><span class=\"line\">  &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">  .then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'then1'</span>, res);  <span class=\"comment\">// then1 start</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'then1Res'</span>;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .catch(<span class=\"function\">(<span class=\"params\">e</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'catch1'</span>, e);</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"string\">'catch1Throw'</span>;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .then(</span><br><span class=\"line\">    (res) =&gt; &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'then2'</span>, res);   <span class=\"comment\">// then2 then1Res</span></span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"string\">'then2Throw'</span>;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    (err) =&gt; &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'then2Catch'</span>, err);</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"string\">'then2CatchThrow'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  )</span><br><span class=\"line\">  .catch(<span class=\"function\">(<span class=\"params\">e</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'catch2'</span>, e);  <span class=\"comment\">// catch2 then2Throw</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'catch2Res'</span>;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'then3'</span>, res); <span class=\"comment\">// then3 catch2Res</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'then3Res'</span>;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .finally(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'finally11111'</span>, res);  <span class=\"comment\">// finally11111 undefined</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .finally(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'finally22222'</span>, res);  <span class=\"comment\">// finally22222 undefined</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'finally22222'</span>;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .then(</span><br><span class=\"line\">    (res) =&gt; &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'then4'</span>, res);   <span class=\"comment\">// then4 then3Res</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'then4Res'</span>;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    (err) =&gt; &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'thenCatch'</span>, err);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">'thenCatchThrow'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  )</span><br><span class=\"line\">  .finally(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'finally33333'</span>);  <span class=\"comment\">// finally33333</span></span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"string\">'finally3Throw'</span>;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'then5'</span>, res);</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"string\">'then5Throw'</span>;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .catch(<span class=\"function\">(<span class=\"params\">e</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'catch4'</span>, e);  <span class=\"comment\">// catch4 finally3Throw</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'catch4Res'</span>;</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure>\n\n<p>完全一致（图就不贴了，读者可以自行执行以下），perfect。</p>\n<h2 id=\"Promise-静态方法的自定义实现\"><a href=\"#Promise-静态方法的自定义实现\" class=\"headerlink\" title=\"Promise 静态方法的自定义实现\"></a>Promise 静态方法的自定义实现</h2><p>当实例方法实现好之后，静态方法就显得比较轻松了，大家只要理解了这几个函数的执行细节，就会好些很多。<br>先来一段测试脚本，先来看看 resolve、reject 静态方法的表现</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> sucFn = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> resolve(<span class=\"string\">'111'</span>));</span><br><span class=\"line\"><span class=\"keyword\">var</span> errFn = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> reject(<span class=\"string\">'222'</span>));</span><br><span class=\"line\"><span class=\"keyword\">var</span> pendingFn = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> resolve(<span class=\"string\">'333'</span>), <span class=\"number\">1000</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = errFn();</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"built_in\">Promise</span>.resolve(a);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a === b); <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = pendingFn();</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"built_in\">Promise</span>.resolve(a); </span><br><span class=\"line\"><span class=\"keyword\">var</span> c = <span class=\"built_in\">Promise</span>.resolve(<span class=\"built_in\">Promise</span>.resolve(a)); </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a === b); <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = sucFn();</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"built_in\">Promise</span>.resolve(a);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a === b); <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = sucFn();</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"built_in\">Promise</span>.reject(a);  <span class=\"comment\">// b.status =&gt; 'fulfilled', b.value =&gt; '222'</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a === b); <span class=\"comment\">// false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = errFn();</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"built_in\">Promise</span>.reject(a);  <span class=\"comment\">// b.status =&gt; 'rejected', b.value =&gt; Promise&lt;rejected, '222'&gt;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a === b); <span class=\"comment\">// false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = pendingFn();</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"built_in\">Promise</span>.reject(a);  <span class=\"comment\">// b.status =&gt; 'rejected', b.value =&gt; Promise&lt;pending, '222'&gt;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a === b); <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n\n<p>从执行结果我们来解读一下：</p>\n<ol>\n<li>Promise.resolve 传入的参数如果是promise实例，则透传该实例的状态及结果；否则 fulfilled 并传出参数本身</li>\n<li>Promise.reject 传入的参数如果是promise实例且被 fulfilled，则 rejected 并传出该实例的结果；否则 reject 并传出参数本身</li>\n</ol>\n<p>比较简单，就直接放代码了。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MyPromise.resolve = <span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 如果 value 是 promise 实例，透传实例即可；否则返回成功态</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (value <span class=\"keyword\">instanceof</span> MyPromise) <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MyPromise(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> resolve(value));</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">MyPromise.reject = <span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MyPromise(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果 value 是 promise 实例且是成功的，reject 该实例的值；否则reject value本身</span></span><br><span class=\"line\">    MyPromise.resolve(value)</span><br><span class=\"line\">      .then(<span class=\"function\">(<span class=\"params\">v</span>) =&gt;</span> reject(v))</span><br><span class=\"line\">      .catch(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> reject(value));</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>至于 all/allSettled/race/any，我们再来几个测试案例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"built_in\">Promise</span>.all([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>].map(<span class=\"function\"><span class=\"params\">v</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> v === <span class=\"number\">3</span> ? <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">x</span>) =&gt;</span> &#123; setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123; <span class=\"built_in\">console</span>.log(<span class=\"number\">123</span>); x(v) &#125;, <span class=\"number\">1000</span>)&#125;) : <span class=\"built_in\">Promise</span>.resolve(v);</span><br><span class=\"line\">&#125;))</span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(a), <span class=\"number\">0</span>); <span class=\"comment\">// Promise&lt;pending&gt;  </span></span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(a), <span class=\"number\">1000</span>) <span class=\"comment\">// Promise&lt;fulfilled, [1,2,3]&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"built_in\">Promise</span>.allSettled([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>].map(<span class=\"function\"><span class=\"params\">v</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> v === <span class=\"number\">3</span> ? <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve,reject</span>) =&gt;</span> &#123; setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123; <span class=\"built_in\">console</span>.log(<span class=\"number\">123</span>); reject(v) &#125;, <span class=\"number\">1000</span>)&#125;) : <span class=\"built_in\">Promise</span>.resolve(v);</span><br><span class=\"line\">&#125;))</span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(b), <span class=\"number\">0</span>); <span class=\"comment\">// Promise&lt;pending&gt;  </span></span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(b), <span class=\"number\">1000</span>) <span class=\"comment\">// Promise&lt;fulfilled, [&#123;status: 'fulfilled', value: 1&#125;,&#123;status: 'fulfilled', value: 2&#125;,&#123;status: 'rejected', reason: 3&#125;]&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> c = <span class=\"built_in\">Promise</span>.any([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>].map(<span class=\"function\"><span class=\"params\">v</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> v === <span class=\"number\">3</span> ? <span class=\"built_in\">Promise</span>.reject(v) : <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123; setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123; <span class=\"built_in\">console</span>.log(<span class=\"number\">123</span>); resolve(v) &#125;, <span class=\"number\">1000</span>)&#125;);</span><br><span class=\"line\">&#125;));</span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(c), <span class=\"number\">0</span>); <span class=\"comment\">// Promise&lt;pending&gt;  </span></span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(c), <span class=\"number\">1000</span>) <span class=\"comment\">// Promise&lt;fulfilled, 1&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> d = <span class=\"built_in\">Promise</span>.race([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>].map(<span class=\"function\"><span class=\"params\">v</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> v === <span class=\"number\">3</span> ? <span class=\"built_in\">Promise</span>.reject(v) : <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123; setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123; <span class=\"built_in\">console</span>.log(<span class=\"number\">123</span>); resolve(v) &#125;, <span class=\"number\">1000</span>)&#125;);</span><br><span class=\"line\">&#125;));</span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(d), <span class=\"number\">0</span>); <span class=\"comment\">// Promise&lt;rejected, 3&gt;  </span></span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(d), <span class=\"number\">1000</span>) <span class=\"comment\">// Promise&lt;rejected, 3&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>解读一下:</p>\n<ul>\n<li>Promise.all([]) ，所有元素都被 fulfilled 才成功；任一 rejected 就 rejected；否则 pending</li>\n<li>Promise.allSettled([]) ，所有元素都被 fulfilled 或 rejected 才成功；否则 pending</li>\n<li>Promise.any([]) ，任一元素被 fulfilled 才成功; 所有 rejected 才 rejected；否则 pending</li>\n<li>Promise.race([]) ，任一元素被 fulfilled 或 rejected 立即返回它的结果；否则 pending</li>\n</ul>\n<p>搞清楚他们的状态流转之后，代码逻辑就比较清晰了，这里直接看代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MyPromise.all = <span class=\"function\">(<span class=\"params\">list</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MyPromise(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> result = [];</span><br><span class=\"line\">    <span class=\"keyword\">let</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">    list.forEach(<span class=\"function\">(<span class=\"params\">item, index</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      MyPromise.resolve(item)</span><br><span class=\"line\">        .then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          result[index] = res;</span><br><span class=\"line\">          count += <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        .catch(<span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> reject(err))</span><br><span class=\"line\">        .finally(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"comment\">// 如果存在失败或 pending 中的实例，什么都不做</span></span><br><span class=\"line\">          <span class=\"keyword\">if</span> (count !== list.length) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">          resolve(result);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">MyPromise.allSettled = <span class=\"function\">(<span class=\"params\">list</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MyPromise(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> result = [];</span><br><span class=\"line\">    <span class=\"keyword\">let</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">    list.forEach(<span class=\"function\">(<span class=\"params\">item, index</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      MyPromise.resolve(item)</span><br><span class=\"line\">        .then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          result[index] = &#123; <span class=\"attr\">status</span>: <span class=\"string\">\"fulfilled\"</span>, <span class=\"attr\">value</span>: res &#125;;</span><br><span class=\"line\">          count += <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        .catch(<span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          result[index] = &#123; <span class=\"attr\">status</span>: <span class=\"string\">\"rejected\"</span>, <span class=\"attr\">reason</span>: err &#125;;</span><br><span class=\"line\">          count += <span class=\"number\">1</span>; <span class=\"comment\">// 一定要放在 result[index] 赋值后边，避免count自增后finally在赋值之前执行</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        .finally(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"comment\">// 如果存在 pending 中的实例，什么都不做</span></span><br><span class=\"line\">          <span class=\"keyword\">if</span> (count !== list.length) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">          resolve(result);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">MyPromise.any = <span class=\"function\">(<span class=\"params\">list</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MyPromise(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> result = [];</span><br><span class=\"line\">    <span class=\"keyword\">let</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">    list.forEach(<span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      MyPromise.resolve(item)</span><br><span class=\"line\">        .then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          resolve(res);</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        .catch(<span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          result[index] = err;</span><br><span class=\"line\">          count += <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        .finally(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (count !== list.length) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">          <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(&#123;</span><br><span class=\"line\">            stack: <span class=\"string\">\"AggregateError: All promises were rejected\"</span>,</span><br><span class=\"line\">            message: <span class=\"string\">\"All promises were rejected\"</span>,</span><br><span class=\"line\">            errors: result,</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">MyPromise.race = <span class=\"function\">(<span class=\"params\">list</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MyPromise(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    list.forEach(<span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      MyPromise.resolve(item)</span><br><span class=\"line\">        .then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> resolve(res))</span><br><span class=\"line\">        .catch(<span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> reject(err));</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>至此，MyPromise 就写完了，感谢各位读者耐心观看，如有帮助不胜荣幸。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Promise-是什么\"><a href=\"#Promise-是什么\" class=\"headerlink\" title=\"Promise 是什么\"></a>Promise 是什么</h2><p>Promise 出现之前，处理异步，可以通过回调来解决，比如典型的 ajax：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ajax(&#123;</span><br><span class=\"line\">  url: <span class=\"string\">'a'</span>,</span><br><span class=\"line\">  success: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    ajax(&#123;</span><br><span class=\"line\">      url: <span class=\"string\">'b'</span>,</span><br><span class=\"line\">      success: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        ajax(&#123;</span><br><span class=\"line\">          url: <span class=\"string\">'c'</span>,</span><br><span class=\"line\">          success: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;&#125;</span><br><span class=\"line\">          fail: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;&#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      fail: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;&#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  error: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;&#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>还有事件监听：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.addListener(<span class=\"string\">'click'</span>, callback)</span><br></pre></td></tr></table></figure>\n\n<p>可以看到，其实回调函数在不同的使用中传入方式不一。<br>Promise 最开始由社区提出，它避免了回调地狱，用法也更强大，es6 正式将 Promise 写进了规范。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ajaxPromise(&#123; <span class=\"attr\">url</span>: <span class=\"string\">'a'</span> &#125;)</span><br><span class=\"line\">.then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> ajaxPromise(&#123; <span class=\"attr\">url</span>: <span class=\"string\">'b'</span>&#125;)</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> ajaxPromise(&#123; <span class=\"attr\">url</span>: <span class=\"string\">'c'</span>&#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Promise-的用法\"><a href=\"#Promise-的用法\" class=\"headerlink\" title=\"Promise 的用法\"></a>Promise 的用法</h2><p>Promise 是一个构造函数，它的实例创建如下</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;&#125;)</span><br><span class=\"line\"><span class=\"keyword\">var</span> p1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> resolve(<span class=\"number\">12</span>))</span><br><span class=\"line\"><span class=\"keyword\">var</span> p2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">r, reject</span>) =&gt;</span> reject(<span class=\"number\">12</span>))</span><br></pre></td></tr></table></figure>\n\n<p>promise 实例总是处于下列三种状态之一，最开始 promise 是在 pending 状态，一旦它变成‘完成’或‘拒绝’，则不会再变：</p>\n<ul>\n<li>待定: pending</li>\n<li>完成: fulfilled</li>\n<li>拒绝: rejected</li>\n</ul>\n<p>支持以下几种实例用法和静态：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Promise</span>.prototype.then </span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.prototype.catch</span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.prototype.finally</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.resolve(any) </span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.reject(any)  </span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.all([])  </span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.allSettled([])</span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.any([])  </span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.race([])</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Promise-实例方法的自定义实现\"><a href=\"#Promise-实例方法的自定义实现\" class=\"headerlink\" title=\"Promise 实例方法的自定义实现\"></a>Promise 实例方法的自定义实现</h2><p>我们先来实现几个实例方法，过去我写过但没有成功，反思一下还是对一些细节的理解不到位导致。我们看下下边这个测试脚本：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 测试用例 1</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  resolve(<span class=\"string\">'start'</span>);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> b = a.then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123; <span class=\"built_in\">console</span>.log(<span class=\"string\">'then 执行'</span>); <span class=\"keyword\">return</span> <span class=\"string\">'thenReturnResult'</span> &#125;);</span><br><span class=\"line\"><span class=\"keyword\">var</span> c = a.catch(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123; <span class=\"built_in\">console</span>.log(<span class=\"string\">'catch 执行'</span>); <span class=\"keyword\">return</span> <span class=\"string\">'catchReturnResult'</span> &#125;);</span><br><span class=\"line\"><span class=\"keyword\">var</span> d = a.finally(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123; <span class=\"built_in\">console</span>.log(<span class=\"string\">'finally 执行'</span>); <span class=\"keyword\">return</span> <span class=\"string\">'finallyReturnResult'</span> &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a === b, b === c, c === d); </span><br><span class=\"line\"><span class=\"comment\">// false false false</span></span><br></pre></td></tr></table></figure>\n\n<p>发现有一个非常重要的细节是：</p>\n<blockquote>\n<p>一个 promise 实例只能一个 then/catch/finally 函数处理，处理完后返回的都是新的 promise。</p>\n</blockquote>\n<p>写代码之前，我们先来解读一下这段代码的执行顺序，以便我们写的更加的顺滑：</p>\n<ol>\n<li>立即执行 new Promise 时传入的函数，Promise 给此函数传入resolve/reject参数，并记录 then、catch、finally 的挂载情况。</li>\n<li>使用者调用 resolve/reject，a 实例的状态被改变，触发 a.then/a.catch/a.finally 执行。</li>\n<li>a.then 挂载函数被执行，b 实例的状态被改变。</li>\n<li>a.catch 执行默认逻辑（不执行挂载函数），c 实例的状态被改变。</li>\n<li>a.finally 挂载函数被执行，d 实例的状态被改变。</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyPromise</span> </span>&#123;</span><br><span class=\"line\">  status = <span class=\"string\">\"pending\"</span>; <span class=\"comment\">// 'pending' | 'fulfilled' | 'rejected'</span></span><br><span class=\"line\">  value = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 一个实例只能被一个 then/catch/finally 函数处理，所以无需用列表存储挂载函数</span></span><br><span class=\"line\">  sucFn = <span class=\"function\"><span class=\"params\">v</span> =&gt;</span> v; <span class=\"comment\">// 成功之后执行</span></span><br><span class=\"line\">  errFn = <span class=\"function\"><span class=\"params\">v</span> =&gt;</span> v; <span class=\"comment\">// 失败之后执行</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 立即执行，并传入 resolve/reject 函数供使用者调用</span></span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(fn) &#123;</span><br><span class=\"line\">    fn(this.#resolve, this.#reject);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 成功之后，触发 .then/.catch/.finally 执行</span></span><br><span class=\"line\">  #resolve = value =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.status !== <span class=\"string\">\"pending\"</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.status = <span class=\"string\">\"fulfilled\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.value = value;</span><br><span class=\"line\">    queueMicrotask(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.sucFn &amp;&amp; <span class=\"keyword\">this</span>.sucFn();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  #reject = reason =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.status !== <span class=\"string\">\"pending\"</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.status = <span class=\"string\">\"rejected\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.value = reason;</span><br><span class=\"line\">    queueMicrotask(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.errFn &amp;&amp; <span class=\"keyword\">this</span>.errFn();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// a.then 返回的是一个新的 Promise, 挂载的 onFulfilled|onRejected 需要在 a 的状态变化后执行</span></span><br><span class=\"line\">  then = <span class=\"function\">(<span class=\"params\">onFulfilled, onRejected</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MyPromise(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.sucFn = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果没传，就透传当前promise状态和值；否则执行 onFulfilled</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!onFulfilled) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.status === <span class=\"string\">\"fulfilled\"</span></span><br><span class=\"line\">            ? resolve(<span class=\"keyword\">this</span>.value)</span><br><span class=\"line\">            : reject(<span class=\"keyword\">this</span>.value);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">          resolve(onFulfilled(<span class=\"keyword\">this</span>.value));</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">          reject(e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.errFn = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;&#125;;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">catch</span> = <span class=\"function\">(<span class=\"params\">onRejected</span>) =&gt;</span> &#123;&#125;</span><br><span class=\"line\">  <span class=\"keyword\">finally</span> = <span class=\"function\">(<span class=\"params\">callback</span>) =&gt;</span> &#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里实现了一部分 then 的逻辑，catch、finally 的逻辑是类似的，读者可以自己尝试写一下。</p>\n<h3 id=\"Promise-静态方法实现全代码\"><a href=\"#Promise-静态方法实现全代码\" class=\"headerlink\" title=\"Promise 静态方法实现全代码\"></a>Promise 静态方法实现全代码</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyPromise</span> </span>&#123;</span><br><span class=\"line\">  status = <span class=\"string\">\"pending\"</span>; <span class=\"comment\">// 'pending' | 'fulfilled' | 'rejected'</span></span><br><span class=\"line\">  value = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(fn) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      fn(this.#resolve, this.#reject);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">      this.#reject(e);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  #resolve = (value) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.status !== <span class=\"string\">\"pending\"</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.status = <span class=\"string\">\"fulfilled\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.value = value;</span><br><span class=\"line\">    queueMicrotask(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.sucFn &amp;&amp; <span class=\"keyword\">this</span>.sucFn();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  #reject = (reason) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.status !== <span class=\"string\">\"pending\"</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.status = <span class=\"string\">\"rejected\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.value = reason;</span><br><span class=\"line\">    queueMicrotask(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.errFn &amp;&amp; <span class=\"keyword\">this</span>.errFn();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  #callbackCatch = (fn, resolve, reject) =&gt; () =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!fn) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 如果不传入，就透传当前promise状态</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.status === <span class=\"string\">\"fulfilled\"</span></span><br><span class=\"line\">        ? resolve(<span class=\"keyword\">this</span>.value)</span><br><span class=\"line\">        : reject(<span class=\"keyword\">this</span>.value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      resolve(fn(<span class=\"keyword\">this</span>.value));</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">      reject(e);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  then = <span class=\"function\">(<span class=\"params\">onFulfilled, onRejected</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// then 返回的是一个新的 Promise</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MyPromise(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      this.sucFn = this.#callbackCatch(onFulfilled, resolve, reject);</span><br><span class=\"line\">      this.errFn = this.#callbackCatch(onRejected, resolve, reject);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">catch</span> = <span class=\"function\">(<span class=\"params\">onRejected</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MyPromise(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 如果上一个 promise 是成功的，被 catch 时依然要把成功的结果透传</span></span><br><span class=\"line\">      this.sucFn = this.#callbackCatch((v) =&gt; v, resolve, reject);</span><br><span class=\"line\">      this.errFn = this.#callbackCatch(onRejected, resolve, reject);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">finally</span> = <span class=\"function\">(<span class=\"params\">callback</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MyPromise(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 正常情况下 finally 要把上一个 promise 的状态和结果透传</span></span><br><span class=\"line\">      <span class=\"comment\">// 只有一种特殊情况：如果finally内部抛错，状态仍需要变更为 rejected</span></span><br><span class=\"line\">      this.sucFn = this.#callbackCatch(</span><br><span class=\"line\">        () =&gt; callback(),</span><br><span class=\"line\">        () =&gt; resolve(<span class=\"keyword\">this</span>.value),</span><br><span class=\"line\">        reject</span><br><span class=\"line\">      );</span><br><span class=\"line\">      this.errFn = this.#callbackCatch(</span><br><span class=\"line\">        () =&gt; callback(),</span><br><span class=\"line\">        () =&gt; resolve(<span class=\"keyword\">this</span>.value),</span><br><span class=\"line\">        reject</span><br><span class=\"line\">      );</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>再用以下脚本来测试一下结果，看看与Promise是否一致：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"keyword\">new</span> MyPromise(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>);  <span class=\"comment\">// 2</span></span><br><span class=\"line\">  setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    resolve(<span class=\"string\">'start'</span>);</span><br><span class=\"line\">  &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">  .then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'then1'</span>, res);  <span class=\"comment\">// then1 start</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'then1Res'</span>;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .catch(<span class=\"function\">(<span class=\"params\">e</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'catch1'</span>, e);</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"string\">'catch1Throw'</span>;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .then(</span><br><span class=\"line\">    (res) =&gt; &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'then2'</span>, res);   <span class=\"comment\">// then2 then1Res</span></span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"string\">'then2Throw'</span>;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    (err) =&gt; &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'then2Catch'</span>, err);</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"string\">'then2CatchThrow'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  )</span><br><span class=\"line\">  .catch(<span class=\"function\">(<span class=\"params\">e</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'catch2'</span>, e);  <span class=\"comment\">// catch2 then2Throw</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'catch2Res'</span>;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'then3'</span>, res); <span class=\"comment\">// then3 catch2Res</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'then3Res'</span>;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .finally(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'finally11111'</span>, res);  <span class=\"comment\">// finally11111 undefined</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .finally(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'finally22222'</span>, res);  <span class=\"comment\">// finally22222 undefined</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'finally22222'</span>;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .then(</span><br><span class=\"line\">    (res) =&gt; &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'then4'</span>, res);   <span class=\"comment\">// then4 then3Res</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'then4Res'</span>;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    (err) =&gt; &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'thenCatch'</span>, err);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">'thenCatchThrow'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  )</span><br><span class=\"line\">  .finally(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'finally33333'</span>);  <span class=\"comment\">// finally33333</span></span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"string\">'finally3Throw'</span>;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'then5'</span>, res);</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"string\">'then5Throw'</span>;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .catch(<span class=\"function\">(<span class=\"params\">e</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'catch4'</span>, e);  <span class=\"comment\">// catch4 finally3Throw</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'catch4Res'</span>;</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure>\n\n<p>完全一致（图就不贴了，读者可以自行执行以下），perfect。</p>\n<h2 id=\"Promise-静态方法的自定义实现\"><a href=\"#Promise-静态方法的自定义实现\" class=\"headerlink\" title=\"Promise 静态方法的自定义实现\"></a>Promise 静态方法的自定义实现</h2><p>当实例方法实现好之后，静态方法就显得比较轻松了，大家只要理解了这几个函数的执行细节，就会好些很多。<br>先来一段测试脚本，先来看看 resolve、reject 静态方法的表现</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> sucFn = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> resolve(<span class=\"string\">'111'</span>));</span><br><span class=\"line\"><span class=\"keyword\">var</span> errFn = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> reject(<span class=\"string\">'222'</span>));</span><br><span class=\"line\"><span class=\"keyword\">var</span> pendingFn = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> resolve(<span class=\"string\">'333'</span>), <span class=\"number\">1000</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = errFn();</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"built_in\">Promise</span>.resolve(a);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a === b); <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = pendingFn();</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"built_in\">Promise</span>.resolve(a); </span><br><span class=\"line\"><span class=\"keyword\">var</span> c = <span class=\"built_in\">Promise</span>.resolve(<span class=\"built_in\">Promise</span>.resolve(a)); </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a === b); <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = sucFn();</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"built_in\">Promise</span>.resolve(a);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a === b); <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = sucFn();</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"built_in\">Promise</span>.reject(a);  <span class=\"comment\">// b.status =&gt; 'fulfilled', b.value =&gt; '222'</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a === b); <span class=\"comment\">// false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = errFn();</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"built_in\">Promise</span>.reject(a);  <span class=\"comment\">// b.status =&gt; 'rejected', b.value =&gt; Promise&lt;rejected, '222'&gt;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a === b); <span class=\"comment\">// false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = pendingFn();</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"built_in\">Promise</span>.reject(a);  <span class=\"comment\">// b.status =&gt; 'rejected', b.value =&gt; Promise&lt;pending, '222'&gt;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a === b); <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n\n<p>从执行结果我们来解读一下：</p>\n<ol>\n<li>Promise.resolve 传入的参数如果是promise实例，则透传该实例的状态及结果；否则 fulfilled 并传出参数本身</li>\n<li>Promise.reject 传入的参数如果是promise实例且被 fulfilled，则 rejected 并传出该实例的结果；否则 reject 并传出参数本身</li>\n</ol>\n<p>比较简单，就直接放代码了。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MyPromise.resolve = <span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 如果 value 是 promise 实例，透传实例即可；否则返回成功态</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (value <span class=\"keyword\">instanceof</span> MyPromise) <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MyPromise(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> resolve(value));</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">MyPromise.reject = <span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MyPromise(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果 value 是 promise 实例且是成功的，reject 该实例的值；否则reject value本身</span></span><br><span class=\"line\">    MyPromise.resolve(value)</span><br><span class=\"line\">      .then(<span class=\"function\">(<span class=\"params\">v</span>) =&gt;</span> reject(v))</span><br><span class=\"line\">      .catch(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> reject(value));</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>至于 all/allSettled/race/any，我们再来几个测试案例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"built_in\">Promise</span>.all([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>].map(<span class=\"function\"><span class=\"params\">v</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> v === <span class=\"number\">3</span> ? <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">x</span>) =&gt;</span> &#123; setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123; <span class=\"built_in\">console</span>.log(<span class=\"number\">123</span>); x(v) &#125;, <span class=\"number\">1000</span>)&#125;) : <span class=\"built_in\">Promise</span>.resolve(v);</span><br><span class=\"line\">&#125;))</span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(a), <span class=\"number\">0</span>); <span class=\"comment\">// Promise&lt;pending&gt;  </span></span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(a), <span class=\"number\">1000</span>) <span class=\"comment\">// Promise&lt;fulfilled, [1,2,3]&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"built_in\">Promise</span>.allSettled([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>].map(<span class=\"function\"><span class=\"params\">v</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> v === <span class=\"number\">3</span> ? <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve,reject</span>) =&gt;</span> &#123; setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123; <span class=\"built_in\">console</span>.log(<span class=\"number\">123</span>); reject(v) &#125;, <span class=\"number\">1000</span>)&#125;) : <span class=\"built_in\">Promise</span>.resolve(v);</span><br><span class=\"line\">&#125;))</span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(b), <span class=\"number\">0</span>); <span class=\"comment\">// Promise&lt;pending&gt;  </span></span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(b), <span class=\"number\">1000</span>) <span class=\"comment\">// Promise&lt;fulfilled, [&#123;status: 'fulfilled', value: 1&#125;,&#123;status: 'fulfilled', value: 2&#125;,&#123;status: 'rejected', reason: 3&#125;]&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> c = <span class=\"built_in\">Promise</span>.any([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>].map(<span class=\"function\"><span class=\"params\">v</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> v === <span class=\"number\">3</span> ? <span class=\"built_in\">Promise</span>.reject(v) : <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123; setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123; <span class=\"built_in\">console</span>.log(<span class=\"number\">123</span>); resolve(v) &#125;, <span class=\"number\">1000</span>)&#125;);</span><br><span class=\"line\">&#125;));</span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(c), <span class=\"number\">0</span>); <span class=\"comment\">// Promise&lt;pending&gt;  </span></span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(c), <span class=\"number\">1000</span>) <span class=\"comment\">// Promise&lt;fulfilled, 1&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> d = <span class=\"built_in\">Promise</span>.race([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>].map(<span class=\"function\"><span class=\"params\">v</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> v === <span class=\"number\">3</span> ? <span class=\"built_in\">Promise</span>.reject(v) : <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123; setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123; <span class=\"built_in\">console</span>.log(<span class=\"number\">123</span>); resolve(v) &#125;, <span class=\"number\">1000</span>)&#125;);</span><br><span class=\"line\">&#125;));</span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(d), <span class=\"number\">0</span>); <span class=\"comment\">// Promise&lt;rejected, 3&gt;  </span></span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(d), <span class=\"number\">1000</span>) <span class=\"comment\">// Promise&lt;rejected, 3&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>解读一下:</p>\n<ul>\n<li>Promise.all([]) ，所有元素都被 fulfilled 才成功；任一 rejected 就 rejected；否则 pending</li>\n<li>Promise.allSettled([]) ，所有元素都被 fulfilled 或 rejected 才成功；否则 pending</li>\n<li>Promise.any([]) ，任一元素被 fulfilled 才成功; 所有 rejected 才 rejected；否则 pending</li>\n<li>Promise.race([]) ，任一元素被 fulfilled 或 rejected 立即返回它的结果；否则 pending</li>\n</ul>\n<p>搞清楚他们的状态流转之后，代码逻辑就比较清晰了，这里直接看代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MyPromise.all = <span class=\"function\">(<span class=\"params\">list</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MyPromise(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> result = [];</span><br><span class=\"line\">    <span class=\"keyword\">let</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">    list.forEach(<span class=\"function\">(<span class=\"params\">item, index</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      MyPromise.resolve(item)</span><br><span class=\"line\">        .then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          result[index] = res;</span><br><span class=\"line\">          count += <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        .catch(<span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> reject(err))</span><br><span class=\"line\">        .finally(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"comment\">// 如果存在失败或 pending 中的实例，什么都不做</span></span><br><span class=\"line\">          <span class=\"keyword\">if</span> (count !== list.length) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">          resolve(result);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">MyPromise.allSettled = <span class=\"function\">(<span class=\"params\">list</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MyPromise(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> result = [];</span><br><span class=\"line\">    <span class=\"keyword\">let</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">    list.forEach(<span class=\"function\">(<span class=\"params\">item, index</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      MyPromise.resolve(item)</span><br><span class=\"line\">        .then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          result[index] = &#123; <span class=\"attr\">status</span>: <span class=\"string\">\"fulfilled\"</span>, <span class=\"attr\">value</span>: res &#125;;</span><br><span class=\"line\">          count += <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        .catch(<span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          result[index] = &#123; <span class=\"attr\">status</span>: <span class=\"string\">\"rejected\"</span>, <span class=\"attr\">reason</span>: err &#125;;</span><br><span class=\"line\">          count += <span class=\"number\">1</span>; <span class=\"comment\">// 一定要放在 result[index] 赋值后边，避免count自增后finally在赋值之前执行</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        .finally(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"comment\">// 如果存在 pending 中的实例，什么都不做</span></span><br><span class=\"line\">          <span class=\"keyword\">if</span> (count !== list.length) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">          resolve(result);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">MyPromise.any = <span class=\"function\">(<span class=\"params\">list</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MyPromise(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> result = [];</span><br><span class=\"line\">    <span class=\"keyword\">let</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">    list.forEach(<span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      MyPromise.resolve(item)</span><br><span class=\"line\">        .then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          resolve(res);</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        .catch(<span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          result[index] = err;</span><br><span class=\"line\">          count += <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        .finally(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (count !== list.length) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">          <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(&#123;</span><br><span class=\"line\">            stack: <span class=\"string\">\"AggregateError: All promises were rejected\"</span>,</span><br><span class=\"line\">            message: <span class=\"string\">\"All promises were rejected\"</span>,</span><br><span class=\"line\">            errors: result,</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">MyPromise.race = <span class=\"function\">(<span class=\"params\">list</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MyPromise(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    list.forEach(<span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      MyPromise.resolve(item)</span><br><span class=\"line\">        .then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> resolve(res))</span><br><span class=\"line\">        .catch(<span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> reject(err));</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>至此，MyPromise 就写完了，感谢各位读者耐心观看，如有帮助不胜荣幸。</p>\n"},{"title":"js 中的隐式转换","date":"2018-06-23T16:00:00.000Z","_content":"\n## js 的值类型\n- number\n- string\n- boolean\n- null\n- undefined\n- object\n\njs 把 number、string、boolean、null、undefined 归成原始值。\narray 与 function 都是 object 的特例。\n\n## js 是弱类型语言\n所谓的弱类型，就是说你不必在声明变量时就指定它的类型，并且你可以给一个变量赋任意类型的值。\n\n```\nvar a = 1;  // 声明一个变量，并赋一个 number 类型的值\na = \"34\"； // 赋其他类型的值\na;  // >> \"34\"\n```\n\n因为它的弱类型特性，在期望某种类型的值而当前值类型不符合时，js 会根据固定的规则来进行隐式的转换。我们最常见的隐式转换之一就是 + 操作符了。\n\n```\n// 把 number 12 转换成了 string \"12\"，并做了字符串拼接的处理\na + 12;   //  >> \"3412\"\n// 把 String \"34\" 转换成了 number 34，并做了数学减运算\na - 12;  //  >>  22\n```\n\n<h2><a id=\"type_convert\">隐式转换规则表</a></h2>\n\n值|转换为string|转换为number| 转换为boolean|转换为object\n---|----------------|-------------------|---------------------|----------------\nundefined | \"undefined\" | NaN | false | throws TypeError\nnull | \"null\" | **0** | false | throws TypeError\ntrue | \"true\" | **1** | - | new Boolean(true)\nfalse | \"false\" | **0** | - | new Boolean(false)\n\"\"(空串) | - | **0** | **false** | new String(\"\")\n\"0\"(非空，数字) | - | 0 | true | new String(\"0\")\n\"one\"(非空，非数字) | - | NaN | true | new String(\"one\")\n0 | \"0\" | - | **false** | new Number(0)\n-0 | \"0\" | - | **false** | new Number(-0)\nNaN | \"NaN\" | - | **false** | new Number(NaN)\nInfinity | \"Infinity\" | - | true | new Number(Infinity)\n-Infinity | \"-Infinity\" | - | true | new Number(-Infinity)\n1(非0) | \"1\" | - | true | new Number(1)\n{} | [对象的类型转换](#object_convert) | - | true | -\n\\[\\](任意数组) | \"\" | **0** | true | -\n\\[9\\](1个数字元素) | \"9\" | **9** | true | -\n\\['a'\\](其他数组) | 使用 join() 方法 | NaN | true | -\nfunction(任意函数) | [对象的类型转换](#object_convert) | NaN | true | -\n\n来看一道题目:\n\n```\nvar s = \"\";\ns.x = \"1\";\nconsole.log(s.x); // undefined\n```\n\n首先，看到 s 是一个 string 型的，那么 s.x = “1” 为什么不会报错？\n\n\n> 是因为我们的 \".\" 运算符期望左边的值是一个对象，所以隐式转换成了一个对象，也就是上表中的 new String(\"\")。\n\n\n其次，既然我在这个隐式转换成的对象上添加了属性 x，为什么访问不到呢？\n\n> 是因为隐式转换时使用的是 new 关键字，也就是说我们每次进行隐式转换所返回的对象都是一个新的对象。所以 s.x 输出的是 undefined。\n\n<h2><a id=\"object_convert\">对象的类型转换</a></h2>\n\n虽然 null 是可以理解成一个特殊的对象（typeof null 返回 \"object\"），但实际上它是 null 类型的唯一一个成员，所以它的类型转换与我们本节要讨论的无关，null 的转换请查看[隐式转换规则表](#type_convert)。\n\n> Object 上有两个方法，一个是 valueOf, 一个是 toString，把 object 转成原始值依赖于这两个方法的返回值。\n\n内置的 valueOf 方法一般返回这个对象本身。\n- Date 对象特殊实现了 valueOf 方法，它的 valueOf 返回时间戳\n\n内置的 toString 方法一般返回 \"[object Object]\"。\n- Date 特殊实现的 toString 方法返回一个可读的日期和时间字符串；\n- Array 特殊实现的 toString 方法返回执行  join() 的结果，这也是为什么 \\[9\\] 转换成数字 9, 因为 [9].join() 返回字符串 \"9\"，而字符串 \"9\" 又转换成数字 9（可能有人问怎么不是执行 valueOf，那是因为 valueOf 返回值是数组自身，并不是一个原始值）。\n- Function 特殊实现的 toString 方法返回定义方法的表示，是一个字符串。\n\n![function.toString](http://upload-images.jianshu.io/upload_images/5370440-6ef0cea0075e9efc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![Object.valueOf 与 Object.toString](http://upload-images.jianshu.io/upload_images/5370440-377983feb6f1b508.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n对象的类型转换规则共分为4种情况。\n- object to boolean： 所有的对象都是真值，即转换成 true。这里注意 new Boolean(false) 返回的是一个对象，所以转换成 true。\n- object to number: 优先调用 valueOf，如果未返回一个原始值，则调用 toString，如果都未返回原始值，则 throw TypeError。\n- object to string：优先调用 toString，如果未返回一个原始值，则调用 valueOf，如果都未返回原始值，则 throw TypeError。\n- object to primitive value\n\n看起来好像还挺简单的样子，其实就是这么简单，只不过有一个特例需要记住。\n\\+ 运算符可以用来做数学加运算，也可以用来做字符串拼接, 与此同时还有 == 与 != 运算符，如果使用这三个运算符时，操作数存在 object 类型的话，那么 object 并不是使用的 object-to-number 或 object-to-string 规则去获得原始值，而是使用 object-to-primitive 规则。\n\n### object-to-primitive 规则\n- 对于 + 、==、!= 三个运算符来说，一般的 object 会走 object-to-number，也就是先调用 valueOf。而特殊的一点时，Date 走 object-to-string 规则，也就是先调用 toString。\n- 对于其他的操作符，比如关系操作符，<、>、<=、=== 等，所有对象包括Date都会走 object-to-number 规则。\n \n![Date 转换规则](http://upload-images.jianshu.io/upload_images/5370440-54b4ff7816f75552.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n> 除了明确需要 Boolean 或者 String 型的地方，Object 转成原始值都是优先调用 valueOf，如果执行结果是原始值，则返回该结果，否则再调用 toString，如果执行结果是原始值，则返回该结果，否则报错。需要注意的是特例 Date 型，它在做 +、==、!= 运算时，优先调用 toString。\n\n明确需要 Boolean 的地方，很常见的例子：\n\n```\nvar o = {};\nif (o) {  // 所有的对象都是真值\n// doSth...\n}\n```\n\n## function 使用 valueOf、toString\n考虑下边这道题：\n> 实现 add 方法，使其可如此使用: add(1)(2,4,5,7)(9)\n\n可能我们常常遇见的场景仅仅是做了二次调用，也就是 add(...args) 徐亚返回一个 function，对这个 function 可以进行二次调用。\n可是这里的调用层级是3次甚至更多。\n\n看下解决方案：\n\n```\nfunction add() {\n  var args = Array.prototype.slice.call(arguments);\n  var _add = function() {\n    Array.prototype.push.apply(args, arguments);\n    return _add;\n  }\n  _add.valueOf = () => args.reduce((a,b) => a+b);\n  return _add;\n}\nvar s = add(1)(4,6)(5);   // function 16 (此处 function 是标识通过 valueOf 或者 toString 返回的，使用时可以当做原始值来使用)\ntypeof s;  // \"function\";\ns + \"\"; // \"16\"\n+s; // 16\n```","source":"_posts/javascript/jsTypeTransfer.md","raw":"---\n title: js 中的隐式转换\n date: 2018-06-24\n tags: Javascript\n---\n\n## js 的值类型\n- number\n- string\n- boolean\n- null\n- undefined\n- object\n\njs 把 number、string、boolean、null、undefined 归成原始值。\narray 与 function 都是 object 的特例。\n\n## js 是弱类型语言\n所谓的弱类型，就是说你不必在声明变量时就指定它的类型，并且你可以给一个变量赋任意类型的值。\n\n```\nvar a = 1;  // 声明一个变量，并赋一个 number 类型的值\na = \"34\"； // 赋其他类型的值\na;  // >> \"34\"\n```\n\n因为它的弱类型特性，在期望某种类型的值而当前值类型不符合时，js 会根据固定的规则来进行隐式的转换。我们最常见的隐式转换之一就是 + 操作符了。\n\n```\n// 把 number 12 转换成了 string \"12\"，并做了字符串拼接的处理\na + 12;   //  >> \"3412\"\n// 把 String \"34\" 转换成了 number 34，并做了数学减运算\na - 12;  //  >>  22\n```\n\n<h2><a id=\"type_convert\">隐式转换规则表</a></h2>\n\n值|转换为string|转换为number| 转换为boolean|转换为object\n---|----------------|-------------------|---------------------|----------------\nundefined | \"undefined\" | NaN | false | throws TypeError\nnull | \"null\" | **0** | false | throws TypeError\ntrue | \"true\" | **1** | - | new Boolean(true)\nfalse | \"false\" | **0** | - | new Boolean(false)\n\"\"(空串) | - | **0** | **false** | new String(\"\")\n\"0\"(非空，数字) | - | 0 | true | new String(\"0\")\n\"one\"(非空，非数字) | - | NaN | true | new String(\"one\")\n0 | \"0\" | - | **false** | new Number(0)\n-0 | \"0\" | - | **false** | new Number(-0)\nNaN | \"NaN\" | - | **false** | new Number(NaN)\nInfinity | \"Infinity\" | - | true | new Number(Infinity)\n-Infinity | \"-Infinity\" | - | true | new Number(-Infinity)\n1(非0) | \"1\" | - | true | new Number(1)\n{} | [对象的类型转换](#object_convert) | - | true | -\n\\[\\](任意数组) | \"\" | **0** | true | -\n\\[9\\](1个数字元素) | \"9\" | **9** | true | -\n\\['a'\\](其他数组) | 使用 join() 方法 | NaN | true | -\nfunction(任意函数) | [对象的类型转换](#object_convert) | NaN | true | -\n\n来看一道题目:\n\n```\nvar s = \"\";\ns.x = \"1\";\nconsole.log(s.x); // undefined\n```\n\n首先，看到 s 是一个 string 型的，那么 s.x = “1” 为什么不会报错？\n\n\n> 是因为我们的 \".\" 运算符期望左边的值是一个对象，所以隐式转换成了一个对象，也就是上表中的 new String(\"\")。\n\n\n其次，既然我在这个隐式转换成的对象上添加了属性 x，为什么访问不到呢？\n\n> 是因为隐式转换时使用的是 new 关键字，也就是说我们每次进行隐式转换所返回的对象都是一个新的对象。所以 s.x 输出的是 undefined。\n\n<h2><a id=\"object_convert\">对象的类型转换</a></h2>\n\n虽然 null 是可以理解成一个特殊的对象（typeof null 返回 \"object\"），但实际上它是 null 类型的唯一一个成员，所以它的类型转换与我们本节要讨论的无关，null 的转换请查看[隐式转换规则表](#type_convert)。\n\n> Object 上有两个方法，一个是 valueOf, 一个是 toString，把 object 转成原始值依赖于这两个方法的返回值。\n\n内置的 valueOf 方法一般返回这个对象本身。\n- Date 对象特殊实现了 valueOf 方法，它的 valueOf 返回时间戳\n\n内置的 toString 方法一般返回 \"[object Object]\"。\n- Date 特殊实现的 toString 方法返回一个可读的日期和时间字符串；\n- Array 特殊实现的 toString 方法返回执行  join() 的结果，这也是为什么 \\[9\\] 转换成数字 9, 因为 [9].join() 返回字符串 \"9\"，而字符串 \"9\" 又转换成数字 9（可能有人问怎么不是执行 valueOf，那是因为 valueOf 返回值是数组自身，并不是一个原始值）。\n- Function 特殊实现的 toString 方法返回定义方法的表示，是一个字符串。\n\n![function.toString](http://upload-images.jianshu.io/upload_images/5370440-6ef0cea0075e9efc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![Object.valueOf 与 Object.toString](http://upload-images.jianshu.io/upload_images/5370440-377983feb6f1b508.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n对象的类型转换规则共分为4种情况。\n- object to boolean： 所有的对象都是真值，即转换成 true。这里注意 new Boolean(false) 返回的是一个对象，所以转换成 true。\n- object to number: 优先调用 valueOf，如果未返回一个原始值，则调用 toString，如果都未返回原始值，则 throw TypeError。\n- object to string：优先调用 toString，如果未返回一个原始值，则调用 valueOf，如果都未返回原始值，则 throw TypeError。\n- object to primitive value\n\n看起来好像还挺简单的样子，其实就是这么简单，只不过有一个特例需要记住。\n\\+ 运算符可以用来做数学加运算，也可以用来做字符串拼接, 与此同时还有 == 与 != 运算符，如果使用这三个运算符时，操作数存在 object 类型的话，那么 object 并不是使用的 object-to-number 或 object-to-string 规则去获得原始值，而是使用 object-to-primitive 规则。\n\n### object-to-primitive 规则\n- 对于 + 、==、!= 三个运算符来说，一般的 object 会走 object-to-number，也就是先调用 valueOf。而特殊的一点时，Date 走 object-to-string 规则，也就是先调用 toString。\n- 对于其他的操作符，比如关系操作符，<、>、<=、=== 等，所有对象包括Date都会走 object-to-number 规则。\n \n![Date 转换规则](http://upload-images.jianshu.io/upload_images/5370440-54b4ff7816f75552.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n> 除了明确需要 Boolean 或者 String 型的地方，Object 转成原始值都是优先调用 valueOf，如果执行结果是原始值，则返回该结果，否则再调用 toString，如果执行结果是原始值，则返回该结果，否则报错。需要注意的是特例 Date 型，它在做 +、==、!= 运算时，优先调用 toString。\n\n明确需要 Boolean 的地方，很常见的例子：\n\n```\nvar o = {};\nif (o) {  // 所有的对象都是真值\n// doSth...\n}\n```\n\n## function 使用 valueOf、toString\n考虑下边这道题：\n> 实现 add 方法，使其可如此使用: add(1)(2,4,5,7)(9)\n\n可能我们常常遇见的场景仅仅是做了二次调用，也就是 add(...args) 徐亚返回一个 function，对这个 function 可以进行二次调用。\n可是这里的调用层级是3次甚至更多。\n\n看下解决方案：\n\n```\nfunction add() {\n  var args = Array.prototype.slice.call(arguments);\n  var _add = function() {\n    Array.prototype.push.apply(args, arguments);\n    return _add;\n  }\n  _add.valueOf = () => args.reduce((a,b) => a+b);\n  return _add;\n}\nvar s = add(1)(4,6)(5);   // function 16 (此处 function 是标识通过 valueOf 或者 toString 返回的，使用时可以当做原始值来使用)\ntypeof s;  // \"function\";\ns + \"\"; // \"16\"\n+s; // 16\n```","slug":"javascript/jsTypeTransfer","published":1,"updated":"2023-02-23T07:18:21.568Z","_id":"clegss93o000cjvoaoi7l5dgf","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"js-的值类型\"><a href=\"#js-的值类型\" class=\"headerlink\" title=\"js 的值类型\"></a>js 的值类型</h2><ul>\n<li>number</li>\n<li>string</li>\n<li>boolean</li>\n<li>null</li>\n<li>undefined</li>\n<li>object</li>\n</ul>\n<p>js 把 number、string、boolean、null、undefined 归成原始值。<br>array 与 function 都是 object 的特例。</p>\n<h2 id=\"js-是弱类型语言\"><a href=\"#js-是弱类型语言\" class=\"headerlink\" title=\"js 是弱类型语言\"></a>js 是弱类型语言</h2><p>所谓的弱类型，就是说你不必在声明变量时就指定它的类型，并且你可以给一个变量赋任意类型的值。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a = 1;  // 声明一个变量，并赋一个 number 类型的值</span><br><span class=\"line\">a = &quot;34&quot;； // 赋其他类型的值</span><br><span class=\"line\">a;  // &gt;&gt; &quot;34&quot;</span><br></pre></td></tr></table></figure>\n\n<p>因为它的弱类型特性，在期望某种类型的值而当前值类型不符合时，js 会根据固定的规则来进行隐式的转换。我们最常见的隐式转换之一就是 + 操作符了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 把 number 12 转换成了 string &quot;12&quot;，并做了字符串拼接的处理</span><br><span class=\"line\">a + 12;   //  &gt;&gt; &quot;3412&quot;</span><br><span class=\"line\">// 把 String &quot;34&quot; 转换成了 number 34，并做了数学减运算</span><br><span class=\"line\">a - 12;  //  &gt;&gt;  22</span><br></pre></td></tr></table></figure>\n\n<h2><a id=\"type_convert\">隐式转换规则表</a></h2>\n\n<table>\n<thead>\n<tr>\n<th>值</th>\n<th>转换为string</th>\n<th>转换为number</th>\n<th>转换为boolean</th>\n<th>转换为object</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>undefined</td>\n<td>“undefined”</td>\n<td>NaN</td>\n<td>false</td>\n<td>throws TypeError</td>\n</tr>\n<tr>\n<td>null</td>\n<td>“null”</td>\n<td><strong>0</strong></td>\n<td>false</td>\n<td>throws TypeError</td>\n</tr>\n<tr>\n<td>true</td>\n<td>“true”</td>\n<td><strong>1</strong></td>\n<td>-</td>\n<td>new Boolean(true)</td>\n</tr>\n<tr>\n<td>false</td>\n<td>“false”</td>\n<td><strong>0</strong></td>\n<td>-</td>\n<td>new Boolean(false)</td>\n</tr>\n<tr>\n<td>“”(空串)</td>\n<td>-</td>\n<td><strong>0</strong></td>\n<td><strong>false</strong></td>\n<td>new String(“”)</td>\n</tr>\n<tr>\n<td>“0”(非空，数字)</td>\n<td>-</td>\n<td>0</td>\n<td>true</td>\n<td>new String(“0”)</td>\n</tr>\n<tr>\n<td>“one”(非空，非数字)</td>\n<td>-</td>\n<td>NaN</td>\n<td>true</td>\n<td>new String(“one”)</td>\n</tr>\n<tr>\n<td>0</td>\n<td>“0”</td>\n<td>-</td>\n<td><strong>false</strong></td>\n<td>new Number(0)</td>\n</tr>\n<tr>\n<td>-0</td>\n<td>“0”</td>\n<td>-</td>\n<td><strong>false</strong></td>\n<td>new Number(-0)</td>\n</tr>\n<tr>\n<td>NaN</td>\n<td>“NaN”</td>\n<td>-</td>\n<td><strong>false</strong></td>\n<td>new Number(NaN)</td>\n</tr>\n<tr>\n<td>Infinity</td>\n<td>“Infinity”</td>\n<td>-</td>\n<td>true</td>\n<td>new Number(Infinity)</td>\n</tr>\n<tr>\n<td>-Infinity</td>\n<td>“-Infinity”</td>\n<td>-</td>\n<td>true</td>\n<td>new Number(-Infinity)</td>\n</tr>\n<tr>\n<td>1(非0)</td>\n<td>“1”</td>\n<td>-</td>\n<td>true</td>\n<td>new Number(1)</td>\n</tr>\n<tr>\n<td>{}</td>\n<td><a href=\"#object_convert\">对象的类型转换</a></td>\n<td>-</td>\n<td>true</td>\n<td>-</td>\n</tr>\n<tr>\n<td>[](任意数组)</td>\n<td>“”</td>\n<td><strong>0</strong></td>\n<td>true</td>\n<td>-</td>\n</tr>\n<tr>\n<td>[9](1个数字元素)</td>\n<td>“9”</td>\n<td><strong>9</strong></td>\n<td>true</td>\n<td>-</td>\n</tr>\n<tr>\n<td>[‘a’](其他数组)</td>\n<td>使用 join() 方法</td>\n<td>NaN</td>\n<td>true</td>\n<td>-</td>\n</tr>\n<tr>\n<td>function(任意函数)</td>\n<td><a href=\"#object_convert\">对象的类型转换</a></td>\n<td>NaN</td>\n<td>true</td>\n<td>-</td>\n</tr>\n</tbody></table>\n<p>来看一道题目:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var s = &quot;&quot;;</span><br><span class=\"line\">s.x = &quot;1&quot;;</span><br><span class=\"line\">console.log(s.x); // undefined</span><br></pre></td></tr></table></figure>\n\n<p>首先，看到 s 是一个 string 型的，那么 s.x = “1” 为什么不会报错？</p>\n<blockquote>\n<p>是因为我们的 “.” 运算符期望左边的值是一个对象，所以隐式转换成了一个对象，也就是上表中的 new String(“”)。</p>\n</blockquote>\n<p>其次，既然我在这个隐式转换成的对象上添加了属性 x，为什么访问不到呢？</p>\n<blockquote>\n<p>是因为隐式转换时使用的是 new 关键字，也就是说我们每次进行隐式转换所返回的对象都是一个新的对象。所以 s.x 输出的是 undefined。</p>\n</blockquote>\n<h2><a id=\"object_convert\">对象的类型转换</a></h2>\n\n<p>虽然 null 是可以理解成一个特殊的对象（typeof null 返回 “object”），但实际上它是 null 类型的唯一一个成员，所以它的类型转换与我们本节要讨论的无关，null 的转换请查看<a href=\"#type_convert\">隐式转换规则表</a>。</p>\n<blockquote>\n<p>Object 上有两个方法，一个是 valueOf, 一个是 toString，把 object 转成原始值依赖于这两个方法的返回值。</p>\n</blockquote>\n<p>内置的 valueOf 方法一般返回这个对象本身。</p>\n<ul>\n<li>Date 对象特殊实现了 valueOf 方法，它的 valueOf 返回时间戳</li>\n</ul>\n<p>内置的 toString 方法一般返回 “[object Object]”。</p>\n<ul>\n<li>Date 特殊实现的 toString 方法返回一个可读的日期和时间字符串；</li>\n<li>Array 特殊实现的 toString 方法返回执行  join() 的结果，这也是为什么 [9] 转换成数字 9, 因为 [9].join() 返回字符串 “9”，而字符串 “9” 又转换成数字 9（可能有人问怎么不是执行 valueOf，那是因为 valueOf 返回值是数组自身，并不是一个原始值）。</li>\n<li>Function 特殊实现的 toString 方法返回定义方法的表示，是一个字符串。</li>\n</ul>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/5370440-6ef0cea0075e9efc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"function.toString\"></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/5370440-377983feb6f1b508.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Object.valueOf 与 Object.toString\"></p>\n<p>对象的类型转换规则共分为4种情况。</p>\n<ul>\n<li>object to boolean： 所有的对象都是真值，即转换成 true。这里注意 new Boolean(false) 返回的是一个对象，所以转换成 true。</li>\n<li>object to number: 优先调用 valueOf，如果未返回一个原始值，则调用 toString，如果都未返回原始值，则 throw TypeError。</li>\n<li>object to string：优先调用 toString，如果未返回一个原始值，则调用 valueOf，如果都未返回原始值，则 throw TypeError。</li>\n<li>object to primitive value</li>\n</ul>\n<p>看起来好像还挺简单的样子，其实就是这么简单，只不过有一个特例需要记住。<br>+ 运算符可以用来做数学加运算，也可以用来做字符串拼接, 与此同时还有 == 与 != 运算符，如果使用这三个运算符时，操作数存在 object 类型的话，那么 object 并不是使用的 object-to-number 或 object-to-string 规则去获得原始值，而是使用 object-to-primitive 规则。</p>\n<h3 id=\"object-to-primitive-规则\"><a href=\"#object-to-primitive-规则\" class=\"headerlink\" title=\"object-to-primitive 规则\"></a>object-to-primitive 规则</h3><ul>\n<li>对于 + 、==、!= 三个运算符来说，一般的 object 会走 object-to-number，也就是先调用 valueOf。而特殊的一点时，Date 走 object-to-string 规则，也就是先调用 toString。</li>\n<li>对于其他的操作符，比如关系操作符，&lt;、&gt;、&lt;=、=== 等，所有对象包括Date都会走 object-to-number 规则。</li>\n</ul>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/5370440-54b4ff7816f75552.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Date 转换规则\"></p>\n<blockquote>\n<p>除了明确需要 Boolean 或者 String 型的地方，Object 转成原始值都是优先调用 valueOf，如果执行结果是原始值，则返回该结果，否则再调用 toString，如果执行结果是原始值，则返回该结果，否则报错。需要注意的是特例 Date 型，它在做 +、==、!= 运算时，优先调用 toString。</p>\n</blockquote>\n<p>明确需要 Boolean 的地方，很常见的例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var o = &#123;&#125;;</span><br><span class=\"line\">if (o) &#123;  // 所有的对象都是真值</span><br><span class=\"line\">// doSth...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"function-使用-valueOf、toString\"><a href=\"#function-使用-valueOf、toString\" class=\"headerlink\" title=\"function 使用 valueOf、toString\"></a>function 使用 valueOf、toString</h2><p>考虑下边这道题：</p>\n<blockquote>\n<p>实现 add 方法，使其可如此使用: add(1)(2,4,5,7)(9)</p>\n</blockquote>\n<p>可能我们常常遇见的场景仅仅是做了二次调用，也就是 add(…args) 徐亚返回一个 function，对这个 function 可以进行二次调用。<br>可是这里的调用层级是3次甚至更多。</p>\n<p>看下解决方案：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function add() &#123;</span><br><span class=\"line\">  var args = Array.prototype.slice.call(arguments);</span><br><span class=\"line\">  var _add = function() &#123;</span><br><span class=\"line\">    Array.prototype.push.apply(args, arguments);</span><br><span class=\"line\">    return _add;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  _add.valueOf = () =&gt; args.reduce((a,b) =&gt; a+b);</span><br><span class=\"line\">  return _add;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var s = add(1)(4,6)(5);   // function 16 (此处 function 是标识通过 valueOf 或者 toString 返回的，使用时可以当做原始值来使用)</span><br><span class=\"line\">typeof s;  // &quot;function&quot;;</span><br><span class=\"line\">s + &quot;&quot;; // &quot;16&quot;</span><br><span class=\"line\">+s; // 16</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"js-的值类型\"><a href=\"#js-的值类型\" class=\"headerlink\" title=\"js 的值类型\"></a>js 的值类型</h2><ul>\n<li>number</li>\n<li>string</li>\n<li>boolean</li>\n<li>null</li>\n<li>undefined</li>\n<li>object</li>\n</ul>\n<p>js 把 number、string、boolean、null、undefined 归成原始值。<br>array 与 function 都是 object 的特例。</p>\n<h2 id=\"js-是弱类型语言\"><a href=\"#js-是弱类型语言\" class=\"headerlink\" title=\"js 是弱类型语言\"></a>js 是弱类型语言</h2><p>所谓的弱类型，就是说你不必在声明变量时就指定它的类型，并且你可以给一个变量赋任意类型的值。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a = 1;  // 声明一个变量，并赋一个 number 类型的值</span><br><span class=\"line\">a = &quot;34&quot;； // 赋其他类型的值</span><br><span class=\"line\">a;  // &gt;&gt; &quot;34&quot;</span><br></pre></td></tr></table></figure>\n\n<p>因为它的弱类型特性，在期望某种类型的值而当前值类型不符合时，js 会根据固定的规则来进行隐式的转换。我们最常见的隐式转换之一就是 + 操作符了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 把 number 12 转换成了 string &quot;12&quot;，并做了字符串拼接的处理</span><br><span class=\"line\">a + 12;   //  &gt;&gt; &quot;3412&quot;</span><br><span class=\"line\">// 把 String &quot;34&quot; 转换成了 number 34，并做了数学减运算</span><br><span class=\"line\">a - 12;  //  &gt;&gt;  22</span><br></pre></td></tr></table></figure>\n\n<h2><a id=\"type_convert\">隐式转换规则表</a></h2>\n\n<table>\n<thead>\n<tr>\n<th>值</th>\n<th>转换为string</th>\n<th>转换为number</th>\n<th>转换为boolean</th>\n<th>转换为object</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>undefined</td>\n<td>“undefined”</td>\n<td>NaN</td>\n<td>false</td>\n<td>throws TypeError</td>\n</tr>\n<tr>\n<td>null</td>\n<td>“null”</td>\n<td><strong>0</strong></td>\n<td>false</td>\n<td>throws TypeError</td>\n</tr>\n<tr>\n<td>true</td>\n<td>“true”</td>\n<td><strong>1</strong></td>\n<td>-</td>\n<td>new Boolean(true)</td>\n</tr>\n<tr>\n<td>false</td>\n<td>“false”</td>\n<td><strong>0</strong></td>\n<td>-</td>\n<td>new Boolean(false)</td>\n</tr>\n<tr>\n<td>“”(空串)</td>\n<td>-</td>\n<td><strong>0</strong></td>\n<td><strong>false</strong></td>\n<td>new String(“”)</td>\n</tr>\n<tr>\n<td>“0”(非空，数字)</td>\n<td>-</td>\n<td>0</td>\n<td>true</td>\n<td>new String(“0”)</td>\n</tr>\n<tr>\n<td>“one”(非空，非数字)</td>\n<td>-</td>\n<td>NaN</td>\n<td>true</td>\n<td>new String(“one”)</td>\n</tr>\n<tr>\n<td>0</td>\n<td>“0”</td>\n<td>-</td>\n<td><strong>false</strong></td>\n<td>new Number(0)</td>\n</tr>\n<tr>\n<td>-0</td>\n<td>“0”</td>\n<td>-</td>\n<td><strong>false</strong></td>\n<td>new Number(-0)</td>\n</tr>\n<tr>\n<td>NaN</td>\n<td>“NaN”</td>\n<td>-</td>\n<td><strong>false</strong></td>\n<td>new Number(NaN)</td>\n</tr>\n<tr>\n<td>Infinity</td>\n<td>“Infinity”</td>\n<td>-</td>\n<td>true</td>\n<td>new Number(Infinity)</td>\n</tr>\n<tr>\n<td>-Infinity</td>\n<td>“-Infinity”</td>\n<td>-</td>\n<td>true</td>\n<td>new Number(-Infinity)</td>\n</tr>\n<tr>\n<td>1(非0)</td>\n<td>“1”</td>\n<td>-</td>\n<td>true</td>\n<td>new Number(1)</td>\n</tr>\n<tr>\n<td>{}</td>\n<td><a href=\"#object_convert\">对象的类型转换</a></td>\n<td>-</td>\n<td>true</td>\n<td>-</td>\n</tr>\n<tr>\n<td>[](任意数组)</td>\n<td>“”</td>\n<td><strong>0</strong></td>\n<td>true</td>\n<td>-</td>\n</tr>\n<tr>\n<td>[9](1个数字元素)</td>\n<td>“9”</td>\n<td><strong>9</strong></td>\n<td>true</td>\n<td>-</td>\n</tr>\n<tr>\n<td>[‘a’](其他数组)</td>\n<td>使用 join() 方法</td>\n<td>NaN</td>\n<td>true</td>\n<td>-</td>\n</tr>\n<tr>\n<td>function(任意函数)</td>\n<td><a href=\"#object_convert\">对象的类型转换</a></td>\n<td>NaN</td>\n<td>true</td>\n<td>-</td>\n</tr>\n</tbody></table>\n<p>来看一道题目:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var s = &quot;&quot;;</span><br><span class=\"line\">s.x = &quot;1&quot;;</span><br><span class=\"line\">console.log(s.x); // undefined</span><br></pre></td></tr></table></figure>\n\n<p>首先，看到 s 是一个 string 型的，那么 s.x = “1” 为什么不会报错？</p>\n<blockquote>\n<p>是因为我们的 “.” 运算符期望左边的值是一个对象，所以隐式转换成了一个对象，也就是上表中的 new String(“”)。</p>\n</blockquote>\n<p>其次，既然我在这个隐式转换成的对象上添加了属性 x，为什么访问不到呢？</p>\n<blockquote>\n<p>是因为隐式转换时使用的是 new 关键字，也就是说我们每次进行隐式转换所返回的对象都是一个新的对象。所以 s.x 输出的是 undefined。</p>\n</blockquote>\n<h2><a id=\"object_convert\">对象的类型转换</a></h2>\n\n<p>虽然 null 是可以理解成一个特殊的对象（typeof null 返回 “object”），但实际上它是 null 类型的唯一一个成员，所以它的类型转换与我们本节要讨论的无关，null 的转换请查看<a href=\"#type_convert\">隐式转换规则表</a>。</p>\n<blockquote>\n<p>Object 上有两个方法，一个是 valueOf, 一个是 toString，把 object 转成原始值依赖于这两个方法的返回值。</p>\n</blockquote>\n<p>内置的 valueOf 方法一般返回这个对象本身。</p>\n<ul>\n<li>Date 对象特殊实现了 valueOf 方法，它的 valueOf 返回时间戳</li>\n</ul>\n<p>内置的 toString 方法一般返回 “[object Object]”。</p>\n<ul>\n<li>Date 特殊实现的 toString 方法返回一个可读的日期和时间字符串；</li>\n<li>Array 特殊实现的 toString 方法返回执行  join() 的结果，这也是为什么 [9] 转换成数字 9, 因为 [9].join() 返回字符串 “9”，而字符串 “9” 又转换成数字 9（可能有人问怎么不是执行 valueOf，那是因为 valueOf 返回值是数组自身，并不是一个原始值）。</li>\n<li>Function 特殊实现的 toString 方法返回定义方法的表示，是一个字符串。</li>\n</ul>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/5370440-6ef0cea0075e9efc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"function.toString\"></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/5370440-377983feb6f1b508.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Object.valueOf 与 Object.toString\"></p>\n<p>对象的类型转换规则共分为4种情况。</p>\n<ul>\n<li>object to boolean： 所有的对象都是真值，即转换成 true。这里注意 new Boolean(false) 返回的是一个对象，所以转换成 true。</li>\n<li>object to number: 优先调用 valueOf，如果未返回一个原始值，则调用 toString，如果都未返回原始值，则 throw TypeError。</li>\n<li>object to string：优先调用 toString，如果未返回一个原始值，则调用 valueOf，如果都未返回原始值，则 throw TypeError。</li>\n<li>object to primitive value</li>\n</ul>\n<p>看起来好像还挺简单的样子，其实就是这么简单，只不过有一个特例需要记住。<br>+ 运算符可以用来做数学加运算，也可以用来做字符串拼接, 与此同时还有 == 与 != 运算符，如果使用这三个运算符时，操作数存在 object 类型的话，那么 object 并不是使用的 object-to-number 或 object-to-string 规则去获得原始值，而是使用 object-to-primitive 规则。</p>\n<h3 id=\"object-to-primitive-规则\"><a href=\"#object-to-primitive-规则\" class=\"headerlink\" title=\"object-to-primitive 规则\"></a>object-to-primitive 规则</h3><ul>\n<li>对于 + 、==、!= 三个运算符来说，一般的 object 会走 object-to-number，也就是先调用 valueOf。而特殊的一点时，Date 走 object-to-string 规则，也就是先调用 toString。</li>\n<li>对于其他的操作符，比如关系操作符，&lt;、&gt;、&lt;=、=== 等，所有对象包括Date都会走 object-to-number 规则。</li>\n</ul>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/5370440-54b4ff7816f75552.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Date 转换规则\"></p>\n<blockquote>\n<p>除了明确需要 Boolean 或者 String 型的地方，Object 转成原始值都是优先调用 valueOf，如果执行结果是原始值，则返回该结果，否则再调用 toString，如果执行结果是原始值，则返回该结果，否则报错。需要注意的是特例 Date 型，它在做 +、==、!= 运算时，优先调用 toString。</p>\n</blockquote>\n<p>明确需要 Boolean 的地方，很常见的例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var o = &#123;&#125;;</span><br><span class=\"line\">if (o) &#123;  // 所有的对象都是真值</span><br><span class=\"line\">// doSth...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"function-使用-valueOf、toString\"><a href=\"#function-使用-valueOf、toString\" class=\"headerlink\" title=\"function 使用 valueOf、toString\"></a>function 使用 valueOf、toString</h2><p>考虑下边这道题：</p>\n<blockquote>\n<p>实现 add 方法，使其可如此使用: add(1)(2,4,5,7)(9)</p>\n</blockquote>\n<p>可能我们常常遇见的场景仅仅是做了二次调用，也就是 add(…args) 徐亚返回一个 function，对这个 function 可以进行二次调用。<br>可是这里的调用层级是3次甚至更多。</p>\n<p>看下解决方案：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function add() &#123;</span><br><span class=\"line\">  var args = Array.prototype.slice.call(arguments);</span><br><span class=\"line\">  var _add = function() &#123;</span><br><span class=\"line\">    Array.prototype.push.apply(args, arguments);</span><br><span class=\"line\">    return _add;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  _add.valueOf = () =&gt; args.reduce((a,b) =&gt; a+b);</span><br><span class=\"line\">  return _add;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var s = add(1)(4,6)(5);   // function 16 (此处 function 是标识通过 valueOf 或者 toString 返回的，使用时可以当做原始值来使用)</span><br><span class=\"line\">typeof s;  // &quot;function&quot;;</span><br><span class=\"line\">s + &quot;&quot;; // &quot;16&quot;</span><br><span class=\"line\">+s; // 16</span><br></pre></td></tr></table></figure>"},{"title":"从键入 URL 到页面渲染都经历了什么-草稿","date":"2018-08-19T16:00:00.000Z","_content":"\n## 客户端键入 URL\n用户键入 url，浏览器会先后经历 DNS寻址、TCP/IP建立链接、发出html请求、接收html的过程，此后浏览器将开始解析 html 中的内容生成 Dom、Cssom，并根据他们来计算所有可见元素的样式创建出 RenderTree，再为 RenderTree 中每一个 Layer（渲染层）确定元素的位置和尺寸，最终完成像素在屏幕上的绘制。\n\n## DNS 寻址\n\n## TCP/IP建立链接（http2/http3）\n\n## 接受 html（web缓存机制）\n\n## HTML解析过程\n1. 主线程开始从上到下执行以构建 Dom 树，直到最后一个字节被解析完毕 \n  - 当遇到立即执行的 script 脚本时，文档解析停止，直到执行完成\n  - 在执行脚本时，另一个线程会解析文档的其余部分，找到外部资源并触发加载，这个过程也叫推测解析。\n  - 当找到一个外部链接，浏览器将生成一个请求（js、css、img）\n  - 无 async、defer 属性（同步js）的 script 资源请求将阻塞后续html解析，只有在资源请求并执行结束后才继续解析。\n  - css、img 的资源请求不会阻塞后续html解析，浏览器在触发资源请求的同时仍继续解析。\n  - css 的资源请求在加载和解析时，Firefox 会阻塞所有 script 脚本执行；WebKit 仅在 script 脚本试图访问某些可能未生效的样式属性时才阻止脚本。\n2. 构建 Dom 树时，同时会构建 cssom 树。【至此，html已解析完成，如果同步的Js执行完成，将进行 DomReady 打点】\n  - Dom 树种有可视化节点（div、span等）、非可视化节点（script、meta、link、title等）。\n  - cssom 树构建不会影响解析。\n  - Dom 树构建的同时会构建 RenderTree，并计算每个节点的样式。Dom树是从代码层面输出的层级，渲染树是通过是否可视来输出的层级（只有可视的节点）。\n  - 设置成 defer 的 script 脚本虽然不会阻塞 html 解析，但是会阻塞布局，在html解析完成后才开始下载脚本，执行脚本并触发 Dom 树更新，再进行布局。而async的脚本则不会阻塞布局和绘制。\n3. 布局\n4. 绘制。绘制第一个像素时会完成 FP 的打点。\n  当 html 中Dom节点很多时渲染引擎会尝试先绘制一部分再解析。\n  当 html 中Dom节点少的时候会在解析完成之后再统一绘制。\n\n## 性能指标及含义、治理建议","source":"_posts/web/DNS.md","raw":"---\n title: 从键入 URL 到页面渲染都经历了什么-草稿\n date: 2018-08-20\n tags: 浏览器原理\n---\n\n## 客户端键入 URL\n用户键入 url，浏览器会先后经历 DNS寻址、TCP/IP建立链接、发出html请求、接收html的过程，此后浏览器将开始解析 html 中的内容生成 Dom、Cssom，并根据他们来计算所有可见元素的样式创建出 RenderTree，再为 RenderTree 中每一个 Layer（渲染层）确定元素的位置和尺寸，最终完成像素在屏幕上的绘制。\n\n## DNS 寻址\n\n## TCP/IP建立链接（http2/http3）\n\n## 接受 html（web缓存机制）\n\n## HTML解析过程\n1. 主线程开始从上到下执行以构建 Dom 树，直到最后一个字节被解析完毕 \n  - 当遇到立即执行的 script 脚本时，文档解析停止，直到执行完成\n  - 在执行脚本时，另一个线程会解析文档的其余部分，找到外部资源并触发加载，这个过程也叫推测解析。\n  - 当找到一个外部链接，浏览器将生成一个请求（js、css、img）\n  - 无 async、defer 属性（同步js）的 script 资源请求将阻塞后续html解析，只有在资源请求并执行结束后才继续解析。\n  - css、img 的资源请求不会阻塞后续html解析，浏览器在触发资源请求的同时仍继续解析。\n  - css 的资源请求在加载和解析时，Firefox 会阻塞所有 script 脚本执行；WebKit 仅在 script 脚本试图访问某些可能未生效的样式属性时才阻止脚本。\n2. 构建 Dom 树时，同时会构建 cssom 树。【至此，html已解析完成，如果同步的Js执行完成，将进行 DomReady 打点】\n  - Dom 树种有可视化节点（div、span等）、非可视化节点（script、meta、link、title等）。\n  - cssom 树构建不会影响解析。\n  - Dom 树构建的同时会构建 RenderTree，并计算每个节点的样式。Dom树是从代码层面输出的层级，渲染树是通过是否可视来输出的层级（只有可视的节点）。\n  - 设置成 defer 的 script 脚本虽然不会阻塞 html 解析，但是会阻塞布局，在html解析完成后才开始下载脚本，执行脚本并触发 Dom 树更新，再进行布局。而async的脚本则不会阻塞布局和绘制。\n3. 布局\n4. 绘制。绘制第一个像素时会完成 FP 的打点。\n  当 html 中Dom节点很多时渲染引擎会尝试先绘制一部分再解析。\n  当 html 中Dom节点少的时候会在解析完成之后再统一绘制。\n\n## 性能指标及含义、治理建议","slug":"web/DNS","published":1,"updated":"2023-02-23T07:18:21.563Z","_id":"clegssnvr000gjvoaoa230igl","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"客户端键入-URL\"><a href=\"#客户端键入-URL\" class=\"headerlink\" title=\"客户端键入 URL\"></a>客户端键入 URL</h2><p>用户键入 url，浏览器会先后经历 DNS寻址、TCP/IP建立链接、发出html请求、接收html的过程，此后浏览器将开始解析 html 中的内容生成 Dom、Cssom，并根据他们来计算所有可见元素的样式创建出 RenderTree，再为 RenderTree 中每一个 Layer（渲染层）确定元素的位置和尺寸，最终完成像素在屏幕上的绘制。</p>\n<h2 id=\"DNS-寻址\"><a href=\"#DNS-寻址\" class=\"headerlink\" title=\"DNS 寻址\"></a>DNS 寻址</h2><h2 id=\"TCP-IP建立链接（http2-http3）\"><a href=\"#TCP-IP建立链接（http2-http3）\" class=\"headerlink\" title=\"TCP/IP建立链接（http2/http3）\"></a>TCP/IP建立链接（http2/http3）</h2><h2 id=\"接受-html（web缓存机制）\"><a href=\"#接受-html（web缓存机制）\" class=\"headerlink\" title=\"接受 html（web缓存机制）\"></a>接受 html（web缓存机制）</h2><h2 id=\"HTML解析过程\"><a href=\"#HTML解析过程\" class=\"headerlink\" title=\"HTML解析过程\"></a>HTML解析过程</h2><ol>\n<li>主线程开始从上到下执行以构建 Dom 树，直到最后一个字节被解析完毕 <ul>\n<li>当遇到立即执行的 script 脚本时，文档解析停止，直到执行完成</li>\n<li>在执行脚本时，另一个线程会解析文档的其余部分，找到外部资源并触发加载，这个过程也叫推测解析。</li>\n<li>当找到一个外部链接，浏览器将生成一个请求（js、css、img）</li>\n<li>无 async、defer 属性（同步js）的 script 资源请求将阻塞后续html解析，只有在资源请求并执行结束后才继续解析。</li>\n<li>css、img 的资源请求不会阻塞后续html解析，浏览器在触发资源请求的同时仍继续解析。</li>\n<li>css 的资源请求在加载和解析时，Firefox 会阻塞所有 script 脚本执行；WebKit 仅在 script 脚本试图访问某些可能未生效的样式属性时才阻止脚本。</li>\n</ul>\n</li>\n<li>构建 Dom 树时，同时会构建 cssom 树。【至此，html已解析完成，如果同步的Js执行完成，将进行 DomReady 打点】<ul>\n<li>Dom 树种有可视化节点（div、span等）、非可视化节点（script、meta、link、title等）。</li>\n<li>cssom 树构建不会影响解析。</li>\n<li>Dom 树构建的同时会构建 RenderTree，并计算每个节点的样式。Dom树是从代码层面输出的层级，渲染树是通过是否可视来输出的层级（只有可视的节点）。</li>\n<li>设置成 defer 的 script 脚本虽然不会阻塞 html 解析，但是会阻塞布局，在html解析完成后才开始下载脚本，执行脚本并触发 Dom 树更新，再进行布局。而async的脚本则不会阻塞布局和绘制。</li>\n</ul>\n</li>\n<li>布局</li>\n<li>绘制。绘制第一个像素时会完成 FP 的打点。<br>当 html 中Dom节点很多时渲染引擎会尝试先绘制一部分再解析。<br>当 html 中Dom节点少的时候会在解析完成之后再统一绘制。</li>\n</ol>\n<h2 id=\"性能指标及含义、治理建议\"><a href=\"#性能指标及含义、治理建议\" class=\"headerlink\" title=\"性能指标及含义、治理建议\"></a>性能指标及含义、治理建议</h2>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"客户端键入-URL\"><a href=\"#客户端键入-URL\" class=\"headerlink\" title=\"客户端键入 URL\"></a>客户端键入 URL</h2><p>用户键入 url，浏览器会先后经历 DNS寻址、TCP/IP建立链接、发出html请求、接收html的过程，此后浏览器将开始解析 html 中的内容生成 Dom、Cssom，并根据他们来计算所有可见元素的样式创建出 RenderTree，再为 RenderTree 中每一个 Layer（渲染层）确定元素的位置和尺寸，最终完成像素在屏幕上的绘制。</p>\n<h2 id=\"DNS-寻址\"><a href=\"#DNS-寻址\" class=\"headerlink\" title=\"DNS 寻址\"></a>DNS 寻址</h2><h2 id=\"TCP-IP建立链接（http2-http3）\"><a href=\"#TCP-IP建立链接（http2-http3）\" class=\"headerlink\" title=\"TCP/IP建立链接（http2/http3）\"></a>TCP/IP建立链接（http2/http3）</h2><h2 id=\"接受-html（web缓存机制）\"><a href=\"#接受-html（web缓存机制）\" class=\"headerlink\" title=\"接受 html（web缓存机制）\"></a>接受 html（web缓存机制）</h2><h2 id=\"HTML解析过程\"><a href=\"#HTML解析过程\" class=\"headerlink\" title=\"HTML解析过程\"></a>HTML解析过程</h2><ol>\n<li>主线程开始从上到下执行以构建 Dom 树，直到最后一个字节被解析完毕 <ul>\n<li>当遇到立即执行的 script 脚本时，文档解析停止，直到执行完成</li>\n<li>在执行脚本时，另一个线程会解析文档的其余部分，找到外部资源并触发加载，这个过程也叫推测解析。</li>\n<li>当找到一个外部链接，浏览器将生成一个请求（js、css、img）</li>\n<li>无 async、defer 属性（同步js）的 script 资源请求将阻塞后续html解析，只有在资源请求并执行结束后才继续解析。</li>\n<li>css、img 的资源请求不会阻塞后续html解析，浏览器在触发资源请求的同时仍继续解析。</li>\n<li>css 的资源请求在加载和解析时，Firefox 会阻塞所有 script 脚本执行；WebKit 仅在 script 脚本试图访问某些可能未生效的样式属性时才阻止脚本。</li>\n</ul>\n</li>\n<li>构建 Dom 树时，同时会构建 cssom 树。【至此，html已解析完成，如果同步的Js执行完成，将进行 DomReady 打点】<ul>\n<li>Dom 树种有可视化节点（div、span等）、非可视化节点（script、meta、link、title等）。</li>\n<li>cssom 树构建不会影响解析。</li>\n<li>Dom 树构建的同时会构建 RenderTree，并计算每个节点的样式。Dom树是从代码层面输出的层级，渲染树是通过是否可视来输出的层级（只有可视的节点）。</li>\n<li>设置成 defer 的 script 脚本虽然不会阻塞 html 解析，但是会阻塞布局，在html解析完成后才开始下载脚本，执行脚本并触发 Dom 树更新，再进行布局。而async的脚本则不会阻塞布局和绘制。</li>\n</ul>\n</li>\n<li>布局</li>\n<li>绘制。绘制第一个像素时会完成 FP 的打点。<br>当 html 中Dom节点很多时渲染引擎会尝试先绘制一部分再解析。<br>当 html 中Dom节点少的时候会在解析完成之后再统一绘制。</li>\n</ol>\n<h2 id=\"性能指标及含义、治理建议\"><a href=\"#性能指标及含义、治理建议\" class=\"headerlink\" title=\"性能指标及含义、治理建议\"></a>性能指标及含义、治理建议</h2>"},{"title":"mongodb-安装于使用","date":"2023-01-30T16:00:00.000Z","_content":"## mongodb 安装与使用\n\n### 安装\n\n> cd /usr/local\n>\n> sudo curl -O https://fastdl.mongodb.org/osx/mongodb-osx-ssl-x86_64-4.0.9.tgz\n> \n> sudo tar -zxvf mongodb-osx-ssl-x86_64-4.0.9.tgz\n> \n> sudo mv mongodb-osx-x86_64-4.0.9/ mongodb\n\n### 配置环境变量\n\n> export PATH=/usr/local/mongodb/bin:$PATH\n\n### 配置数据的存放位置\n\n```\nsudo mkdir -p /usr/local/var/mongodb\nsudo mkdir -p /usr/local/var/log/mongodb\nsudo chown runoob /usr/local/var/mongodb\nsudo chown runoob /usr/local/var/log/mongodb\n```\n\n### 运行\n\n```\n// 在后台运行\nmongod --dbpath /usr/local/var/mongodb --logpath /usr/local/var/log/mongodb/mongo.log --fork\n\n// 在前台运行\nmongod --config /usr/local/etc/mongod.conf\n```\n\n### 查看是否已启动\n\n```\nps aux | grep -v grep | grep mongod\n```\n此时，可以使用 npm install mongodb 来操作 mongo 数据库了。\n\n### 结束运行\n\n```\nmongo\ndb.adminCommand({ \"shutdown\" : 1 })\n```\n\n### 查数据库数据\n\n[下载 robo](https://robomongo.org/download)\n\n### 查看 API\n\nhttps://docs.mongodb.com/manual/reference/method/db.collection.find/\n\n","source":"_posts/fullstack/mongodb.md","raw":"---\ntitle: mongodb-安装于使用\ndate: 2023-01-31\ntags: 全栈\n---\n## mongodb 安装与使用\n\n### 安装\n\n> cd /usr/local\n>\n> sudo curl -O https://fastdl.mongodb.org/osx/mongodb-osx-ssl-x86_64-4.0.9.tgz\n> \n> sudo tar -zxvf mongodb-osx-ssl-x86_64-4.0.9.tgz\n> \n> sudo mv mongodb-osx-x86_64-4.0.9/ mongodb\n\n### 配置环境变量\n\n> export PATH=/usr/local/mongodb/bin:$PATH\n\n### 配置数据的存放位置\n\n```\nsudo mkdir -p /usr/local/var/mongodb\nsudo mkdir -p /usr/local/var/log/mongodb\nsudo chown runoob /usr/local/var/mongodb\nsudo chown runoob /usr/local/var/log/mongodb\n```\n\n### 运行\n\n```\n// 在后台运行\nmongod --dbpath /usr/local/var/mongodb --logpath /usr/local/var/log/mongodb/mongo.log --fork\n\n// 在前台运行\nmongod --config /usr/local/etc/mongod.conf\n```\n\n### 查看是否已启动\n\n```\nps aux | grep -v grep | grep mongod\n```\n此时，可以使用 npm install mongodb 来操作 mongo 数据库了。\n\n### 结束运行\n\n```\nmongo\ndb.adminCommand({ \"shutdown\" : 1 })\n```\n\n### 查数据库数据\n\n[下载 robo](https://robomongo.org/download)\n\n### 查看 API\n\nhttps://docs.mongodb.com/manual/reference/method/db.collection.find/\n\n","slug":"fullstack/mongodb","published":1,"updated":"2023-02-23T07:18:21.571Z","_id":"clegstfco000sjvoaz67v6gmm","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"mongodb-安装与使用\"><a href=\"#mongodb-安装与使用\" class=\"headerlink\" title=\"mongodb 安装与使用\"></a>mongodb 安装与使用</h2><h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><blockquote>\n<p>cd /usr/local</p>\n<p>sudo curl -O <a href=\"https://fastdl.mongodb.org/osx/mongodb-osx-ssl-x86_64-4.0.9.tgz\" target=\"_blank\" rel=\"noopener\">https://fastdl.mongodb.org/osx/mongodb-osx-ssl-x86_64-4.0.9.tgz</a></p>\n<p>sudo tar -zxvf mongodb-osx-ssl-x86_64-4.0.9.tgz</p>\n<p>sudo mv mongodb-osx-x86_64-4.0.9/ mongodb</p>\n</blockquote>\n<h3 id=\"配置环境变量\"><a href=\"#配置环境变量\" class=\"headerlink\" title=\"配置环境变量\"></a>配置环境变量</h3><blockquote>\n<p>export PATH=/usr/local/mongodb/bin:$PATH</p>\n</blockquote>\n<h3 id=\"配置数据的存放位置\"><a href=\"#配置数据的存放位置\" class=\"headerlink\" title=\"配置数据的存放位置\"></a>配置数据的存放位置</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mkdir -p /usr/local/var/mongodb</span><br><span class=\"line\">sudo mkdir -p /usr/local/var/log/mongodb</span><br><span class=\"line\">sudo chown runoob /usr/local/var/mongodb</span><br><span class=\"line\">sudo chown runoob /usr/local/var/log/mongodb</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 在后台运行</span><br><span class=\"line\">mongod --dbpath /usr/local/var/mongodb --logpath /usr/local/var/log/mongodb/mongo.log --fork</span><br><span class=\"line\"></span><br><span class=\"line\">// 在前台运行</span><br><span class=\"line\">mongod --config /usr/local/etc/mongod.conf</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"查看是否已启动\"><a href=\"#查看是否已启动\" class=\"headerlink\" title=\"查看是否已启动\"></a>查看是否已启动</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ps aux | grep -v grep | grep mongod</span><br></pre></td></tr></table></figure>\n\n<p>此时，可以使用 npm install mongodb 来操作 mongo 数据库了。</p>\n<h3 id=\"结束运行\"><a href=\"#结束运行\" class=\"headerlink\" title=\"结束运行\"></a>结束运行</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mongo</span><br><span class=\"line\">db.adminCommand(&#123; &quot;shutdown&quot; : 1 &#125;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"查数据库数据\"><a href=\"#查数据库数据\" class=\"headerlink\" title=\"查数据库数据\"></a>查数据库数据</h3><p><a href=\"https://robomongo.org/download\" target=\"_blank\" rel=\"noopener\">下载 robo</a></p>\n<h3 id=\"查看-API\"><a href=\"#查看-API\" class=\"headerlink\" title=\"查看 API\"></a>查看 API</h3><p><a href=\"https://docs.mongodb.com/manual/reference/method/db.collection.find/\" target=\"_blank\" rel=\"noopener\">https://docs.mongodb.com/manual/reference/method/db.collection.find/</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"mongodb-安装与使用\"><a href=\"#mongodb-安装与使用\" class=\"headerlink\" title=\"mongodb 安装与使用\"></a>mongodb 安装与使用</h2><h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><blockquote>\n<p>cd /usr/local</p>\n<p>sudo curl -O <a href=\"https://fastdl.mongodb.org/osx/mongodb-osx-ssl-x86_64-4.0.9.tgz\" target=\"_blank\" rel=\"noopener\">https://fastdl.mongodb.org/osx/mongodb-osx-ssl-x86_64-4.0.9.tgz</a></p>\n<p>sudo tar -zxvf mongodb-osx-ssl-x86_64-4.0.9.tgz</p>\n<p>sudo mv mongodb-osx-x86_64-4.0.9/ mongodb</p>\n</blockquote>\n<h3 id=\"配置环境变量\"><a href=\"#配置环境变量\" class=\"headerlink\" title=\"配置环境变量\"></a>配置环境变量</h3><blockquote>\n<p>export PATH=/usr/local/mongodb/bin:$PATH</p>\n</blockquote>\n<h3 id=\"配置数据的存放位置\"><a href=\"#配置数据的存放位置\" class=\"headerlink\" title=\"配置数据的存放位置\"></a>配置数据的存放位置</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mkdir -p /usr/local/var/mongodb</span><br><span class=\"line\">sudo mkdir -p /usr/local/var/log/mongodb</span><br><span class=\"line\">sudo chown runoob /usr/local/var/mongodb</span><br><span class=\"line\">sudo chown runoob /usr/local/var/log/mongodb</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 在后台运行</span><br><span class=\"line\">mongod --dbpath /usr/local/var/mongodb --logpath /usr/local/var/log/mongodb/mongo.log --fork</span><br><span class=\"line\"></span><br><span class=\"line\">// 在前台运行</span><br><span class=\"line\">mongod --config /usr/local/etc/mongod.conf</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"查看是否已启动\"><a href=\"#查看是否已启动\" class=\"headerlink\" title=\"查看是否已启动\"></a>查看是否已启动</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ps aux | grep -v grep | grep mongod</span><br></pre></td></tr></table></figure>\n\n<p>此时，可以使用 npm install mongodb 来操作 mongo 数据库了。</p>\n<h3 id=\"结束运行\"><a href=\"#结束运行\" class=\"headerlink\" title=\"结束运行\"></a>结束运行</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mongo</span><br><span class=\"line\">db.adminCommand(&#123; &quot;shutdown&quot; : 1 &#125;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"查数据库数据\"><a href=\"#查数据库数据\" class=\"headerlink\" title=\"查数据库数据\"></a>查数据库数据</h3><p><a href=\"https://robomongo.org/download\" target=\"_blank\" rel=\"noopener\">下载 robo</a></p>\n<h3 id=\"查看-API\"><a href=\"#查看-API\" class=\"headerlink\" title=\"查看 API\"></a>查看 API</h3><p><a href=\"https://docs.mongodb.com/manual/reference/method/db.collection.find/\" target=\"_blank\" rel=\"noopener\">https://docs.mongodb.com/manual/reference/method/db.collection.find/</a></p>\n"},{"title":"力扣算法1-发 Leet coin-草稿","date":"2023-01-30T16:00:00.000Z","_content":"\n## 题目\nhttps://leetcode.cn/problems/coin-bonus\n## 解法\n\n最开始的思路是:\n1. 遍历 leadership，建一个 map 表示领导到直属下级的关系，类似 <code>{ 1: { coin, memberList: [2,4,6] }</code>\n2. 遍历 operations，如果遇到方式 1 就增加 map[1].coin，遇到方式 2 就拿到所有子下属（递归遍历 map[leader].memberList 拿到所有子下属），并增加他们的 coin，遇到方式 3 再拿到所有子下属的 coin 加和。\n\n代码很快就写完了，但是执行超时！于是重新审视这道题，如果第 2 步中的那道所有子下属列表的操作能在第 1 步中拿到，那么就不需要多次去遍历了，修改如下：\n\n```javascript\nvar bonus = function (n, leadership, operations) {\n  // 此时把每个人的上级、下级的关系静态化，而不是只记录直系领导和下属，是处于性能的考虑。\n  // operations 传参中会多次要求输出，如果每一次输出时都临时遍历某员工的上级下级，成本是巨大的\n  let memberMap = {\n    /**\n     * 1: {\n     *  memberList: [], // 存储部门下所有的人\n     *  leaderList: [], // 存储此人的领导们\n     *  coin: 0, // 存储部门所有人获得的 coin 之和\n     * }\n     * */\n  };\n  leadership.forEach(([leader, member]) => {\n    if (!memberMap[leader])\n      memberMap[leader] = {\n        memberList: [], // 可用 Set 也可Array，但执行次数多的情况下 Array 性能比 Set 好\n        leaderList: [],\n        coin: 0,\n      };\n    if (!memberMap[member])\n      memberMap[member] = {\n        memberList: [], \n        leaderList: [],\n        coin: 0,\n      };\n    memberMap[member].leaderList.push(leader);\n    memberMap[leader].memberList.push(member);\n    memberMap[leader].leaderList.forEach((v) => {\n      // 成员的领导人数变更。领导的领导也是领导\n      if (memberMap[member].leaderList.indexOf(v) === -1) { // indexOf 的性能比 some 的性能好\n        memberMap[member].leaderList.push(v);\n      }\n      // 领导们的部门人数变更\n      if (memberMap[v].memberList.indexOf(member) === -1) {\n        memberMap[v].memberList.push(member);\n      }\n    });\n  });\n\n  let result = [];\n  operations.forEach(([type, member, coin]) => {\n    // 给成员发，该成员及领导们的部门 coin += coin\n    if (type === 1) {\n      memberMap[member].coin += coin;\n      memberMap[member].leaderList.forEach((v) => (memberMap[v].coin += +coin));\n      return;\n    }\n    const addCoin = coin * (memberMap[member].memberList.length + 1);\n    // 给成员及其下属发\n    if (type === 2) {\n      // 该成员及领导们的部门 coin += 人数 * coin\n      memberMap[member].coin += addCoin;\n      memberMap[member].leaderList.forEach(\n        (v) =>\n          (memberMap[v].coin += addCoin)\n      );\n      // 下属们的部门 coin += 下属的部门人数 * coin\n      memberMap[member].memberList.forEach(v => {\n        memberMap[v].coin += coin * (memberMap[v].memberList.length + 1)\n      });\n      return;\n    }\n    // 返回部门 coin\n    result.push(memberMap[member].coin % 1000000007);\n  });\n  return result;\n};\n```\n## 测试用例\nhttps://leetcode.cn/submissions/detail/398908470/testcase/\n\n没错的测试用例执行还是超！时！了！\n// TODO 未完待续\n","source":"_posts/leetcode/difficult/coin.md","raw":"---\ntitle: 力扣算法1-发 Leet coin-草稿\ndate: 2023-01-31\ntags: 算法\n---\n\n## 题目\nhttps://leetcode.cn/problems/coin-bonus\n## 解法\n\n最开始的思路是:\n1. 遍历 leadership，建一个 map 表示领导到直属下级的关系，类似 <code>{ 1: { coin, memberList: [2,4,6] }</code>\n2. 遍历 operations，如果遇到方式 1 就增加 map[1].coin，遇到方式 2 就拿到所有子下属（递归遍历 map[leader].memberList 拿到所有子下属），并增加他们的 coin，遇到方式 3 再拿到所有子下属的 coin 加和。\n\n代码很快就写完了，但是执行超时！于是重新审视这道题，如果第 2 步中的那道所有子下属列表的操作能在第 1 步中拿到，那么就不需要多次去遍历了，修改如下：\n\n```javascript\nvar bonus = function (n, leadership, operations) {\n  // 此时把每个人的上级、下级的关系静态化，而不是只记录直系领导和下属，是处于性能的考虑。\n  // operations 传参中会多次要求输出，如果每一次输出时都临时遍历某员工的上级下级，成本是巨大的\n  let memberMap = {\n    /**\n     * 1: {\n     *  memberList: [], // 存储部门下所有的人\n     *  leaderList: [], // 存储此人的领导们\n     *  coin: 0, // 存储部门所有人获得的 coin 之和\n     * }\n     * */\n  };\n  leadership.forEach(([leader, member]) => {\n    if (!memberMap[leader])\n      memberMap[leader] = {\n        memberList: [], // 可用 Set 也可Array，但执行次数多的情况下 Array 性能比 Set 好\n        leaderList: [],\n        coin: 0,\n      };\n    if (!memberMap[member])\n      memberMap[member] = {\n        memberList: [], \n        leaderList: [],\n        coin: 0,\n      };\n    memberMap[member].leaderList.push(leader);\n    memberMap[leader].memberList.push(member);\n    memberMap[leader].leaderList.forEach((v) => {\n      // 成员的领导人数变更。领导的领导也是领导\n      if (memberMap[member].leaderList.indexOf(v) === -1) { // indexOf 的性能比 some 的性能好\n        memberMap[member].leaderList.push(v);\n      }\n      // 领导们的部门人数变更\n      if (memberMap[v].memberList.indexOf(member) === -1) {\n        memberMap[v].memberList.push(member);\n      }\n    });\n  });\n\n  let result = [];\n  operations.forEach(([type, member, coin]) => {\n    // 给成员发，该成员及领导们的部门 coin += coin\n    if (type === 1) {\n      memberMap[member].coin += coin;\n      memberMap[member].leaderList.forEach((v) => (memberMap[v].coin += +coin));\n      return;\n    }\n    const addCoin = coin * (memberMap[member].memberList.length + 1);\n    // 给成员及其下属发\n    if (type === 2) {\n      // 该成员及领导们的部门 coin += 人数 * coin\n      memberMap[member].coin += addCoin;\n      memberMap[member].leaderList.forEach(\n        (v) =>\n          (memberMap[v].coin += addCoin)\n      );\n      // 下属们的部门 coin += 下属的部门人数 * coin\n      memberMap[member].memberList.forEach(v => {\n        memberMap[v].coin += coin * (memberMap[v].memberList.length + 1)\n      });\n      return;\n    }\n    // 返回部门 coin\n    result.push(memberMap[member].coin % 1000000007);\n  });\n  return result;\n};\n```\n## 测试用例\nhttps://leetcode.cn/submissions/detail/398908470/testcase/\n\n没错的测试用例执行还是超！时！了！\n// TODO 未完待续\n","slug":"leetcode/difficult/coin","published":1,"updated":"2023-02-25T00:58:54.028Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clej99gl4000ff8tztfxjq6y6","content":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p><a href=\"https://leetcode.cn/problems/coin-bonus\" target=\"_blank\" rel=\"noopener\">https://leetcode.cn/problems/coin-bonus</a></p>\n<h2 id=\"解法\"><a href=\"#解法\" class=\"headerlink\" title=\"解法\"></a>解法</h2><p>最开始的思路是:</p>\n<ol>\n<li>遍历 leadership，建一个 map 表示领导到直属下级的关系，类似 <code>{ 1: { coin, memberList: [2,4,6] }</code></li>\n<li>遍历 operations，如果遇到方式 1 就增加 map[1].coin，遇到方式 2 就拿到所有子下属（递归遍历 map[leader].memberList 拿到所有子下属），并增加他们的 coin，遇到方式 3 再拿到所有子下属的 coin 加和。</li>\n</ol>\n<p>代码很快就写完了，但是执行超时！于是重新审视这道题，如果第 2 步中的那道所有子下属列表的操作能在第 1 步中拿到，那么就不需要多次去遍历了，修改如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> bonus = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">n, leadership, operations</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 此时把每个人的上级、下级的关系静态化，而不是只记录直系领导和下属，是处于性能的考虑。</span></span><br><span class=\"line\">  <span class=\"comment\">// operations 传参中会多次要求输出，如果每一次输出时都临时遍历某员工的上级下级，成本是巨大的</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> memberMap = &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 1: &#123;</span></span><br><span class=\"line\"><span class=\"comment\">     *  memberList: [], // 存储部门下所有的人</span></span><br><span class=\"line\"><span class=\"comment\">     *  leaderList: [], // 存储此人的领导们</span></span><br><span class=\"line\"><span class=\"comment\">     *  coin: 0, // 存储部门所有人获得的 coin 之和</span></span><br><span class=\"line\"><span class=\"comment\">     * &#125;</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  leadership.forEach(<span class=\"function\">(<span class=\"params\">[leader, member]</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!memberMap[leader])</span><br><span class=\"line\">      memberMap[leader] = &#123;</span><br><span class=\"line\">        memberList: [], <span class=\"comment\">// 可用 Set 也可Array，但执行次数多的情况下 Array 性能比 Set 好</span></span><br><span class=\"line\">        leaderList: [],</span><br><span class=\"line\">        coin: <span class=\"number\">0</span>,</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!memberMap[member])</span><br><span class=\"line\">      memberMap[member] = &#123;</span><br><span class=\"line\">        memberList: [], </span><br><span class=\"line\">        leaderList: [],</span><br><span class=\"line\">        coin: <span class=\"number\">0</span>,</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">    memberMap[member].leaderList.push(leader);</span><br><span class=\"line\">    memberMap[leader].memberList.push(member);</span><br><span class=\"line\">    memberMap[leader].leaderList.forEach(<span class=\"function\">(<span class=\"params\">v</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 成员的领导人数变更。领导的领导也是领导</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (memberMap[member].leaderList.indexOf(v) === <span class=\"number\">-1</span>) &#123; <span class=\"comment\">// indexOf 的性能比 some 的性能好</span></span><br><span class=\"line\">        memberMap[member].leaderList.push(v);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">// 领导们的部门人数变更</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (memberMap[v].memberList.indexOf(member) === <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">        memberMap[v].memberList.push(member);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> result = [];</span><br><span class=\"line\">  operations.forEach(<span class=\"function\">(<span class=\"params\">[type, member, coin]</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 给成员发，该成员及领导们的部门 coin += coin</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (type === <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      memberMap[member].coin += coin;</span><br><span class=\"line\">      memberMap[member].leaderList.forEach(<span class=\"function\">(<span class=\"params\">v</span>) =&gt;</span> (memberMap[v].coin += +coin));</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> addCoin = coin * (memberMap[member].memberList.length + <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 给成员及其下属发</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (type === <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 该成员及领导们的部门 coin += 人数 * coin</span></span><br><span class=\"line\">      memberMap[member].coin += addCoin;</span><br><span class=\"line\">      memberMap[member].leaderList.forEach(</span><br><span class=\"line\">        (v) =&gt;</span><br><span class=\"line\">          (memberMap[v].coin += addCoin)</span><br><span class=\"line\">      );</span><br><span class=\"line\">      <span class=\"comment\">// 下属们的部门 coin += 下属的部门人数 * coin</span></span><br><span class=\"line\">      memberMap[member].memberList.forEach(<span class=\"function\"><span class=\"params\">v</span> =&gt;</span> &#123;</span><br><span class=\"line\">        memberMap[v].coin += coin * (memberMap[v].memberList.length + <span class=\"number\">1</span>)</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 返回部门 coin</span></span><br><span class=\"line\">    result.push(memberMap[member].coin % <span class=\"number\">1000000007</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"测试用例\"><a href=\"#测试用例\" class=\"headerlink\" title=\"测试用例\"></a>测试用例</h2><p><a href=\"https://leetcode.cn/submissions/detail/398908470/testcase/\" target=\"_blank\" rel=\"noopener\">https://leetcode.cn/submissions/detail/398908470/testcase/</a></p>\n<p>没错的测试用例执行还是超！时！了！<br>// TODO 未完待续</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p><a href=\"https://leetcode.cn/problems/coin-bonus\" target=\"_blank\" rel=\"noopener\">https://leetcode.cn/problems/coin-bonus</a></p>\n<h2 id=\"解法\"><a href=\"#解法\" class=\"headerlink\" title=\"解法\"></a>解法</h2><p>最开始的思路是:</p>\n<ol>\n<li>遍历 leadership，建一个 map 表示领导到直属下级的关系，类似 <code>{ 1: { coin, memberList: [2,4,6] }</code></li>\n<li>遍历 operations，如果遇到方式 1 就增加 map[1].coin，遇到方式 2 就拿到所有子下属（递归遍历 map[leader].memberList 拿到所有子下属），并增加他们的 coin，遇到方式 3 再拿到所有子下属的 coin 加和。</li>\n</ol>\n<p>代码很快就写完了，但是执行超时！于是重新审视这道题，如果第 2 步中的那道所有子下属列表的操作能在第 1 步中拿到，那么就不需要多次去遍历了，修改如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> bonus = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">n, leadership, operations</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 此时把每个人的上级、下级的关系静态化，而不是只记录直系领导和下属，是处于性能的考虑。</span></span><br><span class=\"line\">  <span class=\"comment\">// operations 传参中会多次要求输出，如果每一次输出时都临时遍历某员工的上级下级，成本是巨大的</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> memberMap = &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 1: &#123;</span></span><br><span class=\"line\"><span class=\"comment\">     *  memberList: [], // 存储部门下所有的人</span></span><br><span class=\"line\"><span class=\"comment\">     *  leaderList: [], // 存储此人的领导们</span></span><br><span class=\"line\"><span class=\"comment\">     *  coin: 0, // 存储部门所有人获得的 coin 之和</span></span><br><span class=\"line\"><span class=\"comment\">     * &#125;</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  leadership.forEach(<span class=\"function\">(<span class=\"params\">[leader, member]</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!memberMap[leader])</span><br><span class=\"line\">      memberMap[leader] = &#123;</span><br><span class=\"line\">        memberList: [], <span class=\"comment\">// 可用 Set 也可Array，但执行次数多的情况下 Array 性能比 Set 好</span></span><br><span class=\"line\">        leaderList: [],</span><br><span class=\"line\">        coin: <span class=\"number\">0</span>,</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!memberMap[member])</span><br><span class=\"line\">      memberMap[member] = &#123;</span><br><span class=\"line\">        memberList: [], </span><br><span class=\"line\">        leaderList: [],</span><br><span class=\"line\">        coin: <span class=\"number\">0</span>,</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">    memberMap[member].leaderList.push(leader);</span><br><span class=\"line\">    memberMap[leader].memberList.push(member);</span><br><span class=\"line\">    memberMap[leader].leaderList.forEach(<span class=\"function\">(<span class=\"params\">v</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 成员的领导人数变更。领导的领导也是领导</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (memberMap[member].leaderList.indexOf(v) === <span class=\"number\">-1</span>) &#123; <span class=\"comment\">// indexOf 的性能比 some 的性能好</span></span><br><span class=\"line\">        memberMap[member].leaderList.push(v);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">// 领导们的部门人数变更</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (memberMap[v].memberList.indexOf(member) === <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">        memberMap[v].memberList.push(member);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> result = [];</span><br><span class=\"line\">  operations.forEach(<span class=\"function\">(<span class=\"params\">[type, member, coin]</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 给成员发，该成员及领导们的部门 coin += coin</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (type === <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      memberMap[member].coin += coin;</span><br><span class=\"line\">      memberMap[member].leaderList.forEach(<span class=\"function\">(<span class=\"params\">v</span>) =&gt;</span> (memberMap[v].coin += +coin));</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> addCoin = coin * (memberMap[member].memberList.length + <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 给成员及其下属发</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (type === <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 该成员及领导们的部门 coin += 人数 * coin</span></span><br><span class=\"line\">      memberMap[member].coin += addCoin;</span><br><span class=\"line\">      memberMap[member].leaderList.forEach(</span><br><span class=\"line\">        (v) =&gt;</span><br><span class=\"line\">          (memberMap[v].coin += addCoin)</span><br><span class=\"line\">      );</span><br><span class=\"line\">      <span class=\"comment\">// 下属们的部门 coin += 下属的部门人数 * coin</span></span><br><span class=\"line\">      memberMap[member].memberList.forEach(<span class=\"function\"><span class=\"params\">v</span> =&gt;</span> &#123;</span><br><span class=\"line\">        memberMap[v].coin += coin * (memberMap[v].memberList.length + <span class=\"number\">1</span>)</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 返回部门 coin</span></span><br><span class=\"line\">    result.push(memberMap[member].coin % <span class=\"number\">1000000007</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"测试用例\"><a href=\"#测试用例\" class=\"headerlink\" title=\"测试用例\"></a>测试用例</h2><p><a href=\"https://leetcode.cn/submissions/detail/398908470/testcase/\" target=\"_blank\" rel=\"noopener\">https://leetcode.cn/submissions/detail/398908470/testcase/</a></p>\n<p>没错的测试用例执行还是超！时！了！<br>// TODO 未完待续</p>\n"},{"title":"力扣算法3-重排水果-草稿","date":"2023-02-22T16:00:00.000Z","_content":"\n## 题目\nhttps://leetcode.cn/problems/rearranging-fruits/\n\n## 解法\n// TODO 未完待续\n\n```javascript\n/**\n * @param {number[]} basket1\n * @param {number[]} basket2\n * @return {number}\n */\nvar minCost = function(basket1, basket2) {\n  const left = basket1.reduce((a,b) => a+b);\n  const right = basket2.reduce((a,b) => a+b);\n  if (left === right) return 0;\n  const delta = Math.abs(left-right)/2;\n  if (delta % 1 !== 0) return -1;\n  let result = 0;\n  let flag = false;\n  flag = basket1.some((item, index) => {\n      const rightValue = left > right ? item + delta : item - delta;\n      const rightIdx = basket2.indexOf(rightValue);\n      // 看看1个元素组成的组合中，差值相抵的情况\n      if (rightIdx !== -1) {\n        result = Math.min(item, basket2[rightIdx]);\n        return true;\n      }\n      let count = 2;\n      let find = false;\n      while (!find && count <= basket1.length - index - 1) {\n        \n        count += 1;\n      }\n      // 看看多个元素组成的组合中，差值相抵的情况\n      return find;\n  });\n  return result;\n};\n\n// 获取数组内，count 个元素相加的和的组合情况\nfunction getSum(array, count, startIdx = 0) {\n  if (count === 1) return array;\n  let cur = 2;\n  while (cur < array.length) {\n    array.forEach((v, index) => {})\n  }\n}\n\n// 获取数组内，count 个元素相加等于 sum 的元素下标集合\nfunction getIndex(array, sum, count, list, startIdx = 0) {\n  if (count === 1) return array.indexOf(sum) === -1 ? [-1] : list.concat(startIdx + array.indexOf(sum));\n  let result = [];\n  array.forEach((v, index) => {\n      const res = getIndex(array.slice(index+1), sum-v, count-1, list.concat(startIdx+index), startIdx+index+1);\n      if (res.includes(-1)) return;\n      result.push(res);\n  });\n  return result;\n}\nconsole.log(getIndex([4, 2, 2, 3, 2, 1, 1, 5], 6, 3, []));\n```","source":"_posts/leetcode/difficult/fruits.md","raw":"---\ntitle: 力扣算法3-重排水果-草稿\ndate: 2023-02-23\ntags: 算法\n---\n\n## 题目\nhttps://leetcode.cn/problems/rearranging-fruits/\n\n## 解法\n// TODO 未完待续\n\n```javascript\n/**\n * @param {number[]} basket1\n * @param {number[]} basket2\n * @return {number}\n */\nvar minCost = function(basket1, basket2) {\n  const left = basket1.reduce((a,b) => a+b);\n  const right = basket2.reduce((a,b) => a+b);\n  if (left === right) return 0;\n  const delta = Math.abs(left-right)/2;\n  if (delta % 1 !== 0) return -1;\n  let result = 0;\n  let flag = false;\n  flag = basket1.some((item, index) => {\n      const rightValue = left > right ? item + delta : item - delta;\n      const rightIdx = basket2.indexOf(rightValue);\n      // 看看1个元素组成的组合中，差值相抵的情况\n      if (rightIdx !== -1) {\n        result = Math.min(item, basket2[rightIdx]);\n        return true;\n      }\n      let count = 2;\n      let find = false;\n      while (!find && count <= basket1.length - index - 1) {\n        \n        count += 1;\n      }\n      // 看看多个元素组成的组合中，差值相抵的情况\n      return find;\n  });\n  return result;\n};\n\n// 获取数组内，count 个元素相加的和的组合情况\nfunction getSum(array, count, startIdx = 0) {\n  if (count === 1) return array;\n  let cur = 2;\n  while (cur < array.length) {\n    array.forEach((v, index) => {})\n  }\n}\n\n// 获取数组内，count 个元素相加等于 sum 的元素下标集合\nfunction getIndex(array, sum, count, list, startIdx = 0) {\n  if (count === 1) return array.indexOf(sum) === -1 ? [-1] : list.concat(startIdx + array.indexOf(sum));\n  let result = [];\n  array.forEach((v, index) => {\n      const res = getIndex(array.slice(index+1), sum-v, count-1, list.concat(startIdx+index), startIdx+index+1);\n      if (res.includes(-1)) return;\n      result.push(res);\n  });\n  return result;\n}\nconsole.log(getIndex([4, 2, 2, 3, 2, 1, 1, 5], 6, 3, []));\n```","slug":"leetcode/difficult/fruits","published":1,"updated":"2023-02-25T01:00:59.802Z","_id":"clej99xsz000hf8tz8hhxgrzd","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p><a href=\"https://leetcode.cn/problems/rearranging-fruits/\" target=\"_blank\" rel=\"noopener\">https://leetcode.cn/problems/rearranging-fruits/</a></p>\n<h2 id=\"解法\"><a href=\"#解法\" class=\"headerlink\" title=\"解法\"></a>解法</h2><p>// TODO 未完待续</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number[]&#125;</span> <span class=\"variable\">basket1</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number[]&#125;</span> <span class=\"variable\">basket2</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;number&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> minCost = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">basket1, basket2</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> left = basket1.reduce(<span class=\"function\">(<span class=\"params\">a,b</span>) =&gt;</span> a+b);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> right = basket2.reduce(<span class=\"function\">(<span class=\"params\">a,b</span>) =&gt;</span> a+b);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (left === right) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> delta = <span class=\"built_in\">Math</span>.abs(left-right)/<span class=\"number\">2</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (delta % <span class=\"number\">1</span> !== <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> result = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> flag = <span class=\"literal\">false</span>;</span><br><span class=\"line\">  flag = basket1.some(<span class=\"function\">(<span class=\"params\">item, index</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> rightValue = left &gt; right ? item + delta : item - delta;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> rightIdx = basket2.indexOf(rightValue);</span><br><span class=\"line\">      <span class=\"comment\">// 看看1个元素组成的组合中，差值相抵的情况</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (rightIdx !== <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">        result = <span class=\"built_in\">Math</span>.min(item, basket2[rightIdx]);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> count = <span class=\"number\">2</span>;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> find = <span class=\"literal\">false</span>;</span><br><span class=\"line\">      <span class=\"keyword\">while</span> (!find &amp;&amp; count &lt;= basket1.length - index - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        count += <span class=\"number\">1</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">// 看看多个元素组成的组合中，差值相抵的情况</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> find;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取数组内，count 个元素相加的和的组合情况</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getSum</span>(<span class=\"params\">array, count, startIdx = <span class=\"number\">0</span></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (count === <span class=\"number\">1</span>) <span class=\"keyword\">return</span> array;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> cur = <span class=\"number\">2</span>;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (cur &lt; array.length) &#123;</span><br><span class=\"line\">    array.forEach(<span class=\"function\">(<span class=\"params\">v, index</span>) =&gt;</span> &#123;&#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取数组内，count 个元素相加等于 sum 的元素下标集合</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getIndex</span>(<span class=\"params\">array, sum, count, list, startIdx = <span class=\"number\">0</span></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (count === <span class=\"number\">1</span>) <span class=\"keyword\">return</span> array.indexOf(sum) === <span class=\"number\">-1</span> ? [<span class=\"number\">-1</span>] : list.concat(startIdx + array.indexOf(sum));</span><br><span class=\"line\">  <span class=\"keyword\">let</span> result = [];</span><br><span class=\"line\">  array.forEach(<span class=\"function\">(<span class=\"params\">v, index</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> res = getIndex(array.slice(index+<span class=\"number\">1</span>), sum-v, count<span class=\"number\">-1</span>, list.concat(startIdx+index), startIdx+index+<span class=\"number\">1</span>);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (res.includes(<span class=\"number\">-1</span>)) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">      result.push(res);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(getIndex([<span class=\"number\">4</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">5</span>], <span class=\"number\">6</span>, <span class=\"number\">3</span>, []));</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p><a href=\"https://leetcode.cn/problems/rearranging-fruits/\" target=\"_blank\" rel=\"noopener\">https://leetcode.cn/problems/rearranging-fruits/</a></p>\n<h2 id=\"解法\"><a href=\"#解法\" class=\"headerlink\" title=\"解法\"></a>解法</h2><p>// TODO 未完待续</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number[]&#125;</span> <span class=\"variable\">basket1</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number[]&#125;</span> <span class=\"variable\">basket2</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;number&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> minCost = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">basket1, basket2</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> left = basket1.reduce(<span class=\"function\">(<span class=\"params\">a,b</span>) =&gt;</span> a+b);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> right = basket2.reduce(<span class=\"function\">(<span class=\"params\">a,b</span>) =&gt;</span> a+b);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (left === right) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> delta = <span class=\"built_in\">Math</span>.abs(left-right)/<span class=\"number\">2</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (delta % <span class=\"number\">1</span> !== <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> result = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> flag = <span class=\"literal\">false</span>;</span><br><span class=\"line\">  flag = basket1.some(<span class=\"function\">(<span class=\"params\">item, index</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> rightValue = left &gt; right ? item + delta : item - delta;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> rightIdx = basket2.indexOf(rightValue);</span><br><span class=\"line\">      <span class=\"comment\">// 看看1个元素组成的组合中，差值相抵的情况</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (rightIdx !== <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">        result = <span class=\"built_in\">Math</span>.min(item, basket2[rightIdx]);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> count = <span class=\"number\">2</span>;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> find = <span class=\"literal\">false</span>;</span><br><span class=\"line\">      <span class=\"keyword\">while</span> (!find &amp;&amp; count &lt;= basket1.length - index - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        count += <span class=\"number\">1</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">// 看看多个元素组成的组合中，差值相抵的情况</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> find;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取数组内，count 个元素相加的和的组合情况</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getSum</span>(<span class=\"params\">array, count, startIdx = <span class=\"number\">0</span></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (count === <span class=\"number\">1</span>) <span class=\"keyword\">return</span> array;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> cur = <span class=\"number\">2</span>;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (cur &lt; array.length) &#123;</span><br><span class=\"line\">    array.forEach(<span class=\"function\">(<span class=\"params\">v, index</span>) =&gt;</span> &#123;&#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取数组内，count 个元素相加等于 sum 的元素下标集合</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getIndex</span>(<span class=\"params\">array, sum, count, list, startIdx = <span class=\"number\">0</span></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (count === <span class=\"number\">1</span>) <span class=\"keyword\">return</span> array.indexOf(sum) === <span class=\"number\">-1</span> ? [<span class=\"number\">-1</span>] : list.concat(startIdx + array.indexOf(sum));</span><br><span class=\"line\">  <span class=\"keyword\">let</span> result = [];</span><br><span class=\"line\">  array.forEach(<span class=\"function\">(<span class=\"params\">v, index</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> res = getIndex(array.slice(index+<span class=\"number\">1</span>), sum-v, count<span class=\"number\">-1</span>, list.concat(startIdx+index), startIdx+index+<span class=\"number\">1</span>);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (res.includes(<span class=\"number\">-1</span>)) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">      result.push(res);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(getIndex([<span class=\"number\">4</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">5</span>], <span class=\"number\">6</span>, <span class=\"number\">3</span>, []));</span><br></pre></td></tr></table></figure>"},{"title":"力扣算法2-打家劫舍-草稿","date":"2023-02-22T16:00:00.000Z","_content":"\n## 题目\n\nhttps://leetcode.cn/problems/house-robber-iv/\n\n## 解法\n\n初步思路是先获取窃取房屋的组合情况、再取得每一个组合的最高金额、再拿到所有最高金额中最小值。\n\n```javascript\nvar minCapability = function (nums, k) {\n  if (k === 1) return Math.min(...nums);\n  // 1、窃取房屋的组合情况\n  function getNextIndex(index, count, number) {\n    // 如果后边的房间不满足窃取规则，不做任何操作\n    if (nums.length - index - 1 < 2 * (k - count)) return;\n    if (k === count + 1) {\n      // 如果是最后一个可窃取的房间，那么拿到后边房间都可以成为组合，返回最小值即可\n      if (index + 2 === nums.length - 1)\n        return Math.min(number, nums[index + 2]);\n      return Math.min(number, Math.min(...nums.slice(index + 2)));\n    }\n    // 3、返回最高金额列表中的最小值\n    return Math.min(\n      ...nums\n        .slice(index + 2)\n        .map((sec, secIdx) => {\n          // 2、拿到组合中最高金额\n          return getNextIndex(\n            index + 2 + secIdx,\n            count + 1,\n            Math.max(number, sec)\n          );\n        })\n        .filter((v) => v)\n    );\n  }\n  // 3、返回最高金额列表中的最小值\n  return Math.min(\n    ...nums.map((item, index) => getNextIndex(index, 1, item)).filter((v) => v)\n  );\n};\n```\n\n测试一下，好使。\n\n```javascript\n// minCapability([5038,3053,2825,3638,4648,3259,4948,4248,4940,2834,109,5224,5097,4708,2162,3438,4152,4134,551,3961,2294,3961,1327,2395,1002,763,4296,3147,5069,2156,572,1261,4272,4158,5186,2543,5055,4735,2325,1206,1019,1257,5048,1563,3507,4269,5328,173,5007,2392,967,2768,86,3401,3667,4406,4487,876,1530,819,1320,883,1101,5317,2305,89,788,1603,3456,5221,1910,3343,4597], 28)\n```\n\n但是太慢，leetCode 还是过不去！\n题为求能偷的 k 间房屋中最小金额。于是想到用二分法来做：\n1. 对金额先做二分，设定两个指针，一个指最左，一个指最右，设定一个 mid 值为此平均值\n2. 判断 mid 是否符合 k 间房屋的设定；遍历 nums 中所有小于 mid 的值，存在不相邻的 k 个即符合设定\n3. 如果符合说明它还可能不是最小的金额，要往左查找；如果不符合往右查找\n\n```javascript\n/*\n * @param {number[]} nums 房屋及其价值\n * @param {number} k 最少能偷多少家\n * @return {number}\n */\nvar minCapability = function (nums, k) {\n  let L = Math.min(...nums);\n  let R = Math.max(...nums);\n  function check(n) {\n    let cnt = 0;\n    for (let i = 0; i < nums.length; i++) {\n      if (nums[i] <= n) {\n        cnt++;\n        i++;\n      }\n    }\n    return cnt >= k;\n  }\n  while (L < R) {\n    let mid = Math.floor((L + R) / 2);\n    if (check(mid)) {\n      R = mid;\n    } else {\n      L = mid + 1;\n    }\n  }\n  return R;\n};\n```\n","source":"_posts/leetcode/normal/thief.md","raw":"---\ntitle: 力扣算法2-打家劫舍-草稿\ndate: 2023-02-23\ntags: 算法\n---\n\n## 题目\n\nhttps://leetcode.cn/problems/house-robber-iv/\n\n## 解法\n\n初步思路是先获取窃取房屋的组合情况、再取得每一个组合的最高金额、再拿到所有最高金额中最小值。\n\n```javascript\nvar minCapability = function (nums, k) {\n  if (k === 1) return Math.min(...nums);\n  // 1、窃取房屋的组合情况\n  function getNextIndex(index, count, number) {\n    // 如果后边的房间不满足窃取规则，不做任何操作\n    if (nums.length - index - 1 < 2 * (k - count)) return;\n    if (k === count + 1) {\n      // 如果是最后一个可窃取的房间，那么拿到后边房间都可以成为组合，返回最小值即可\n      if (index + 2 === nums.length - 1)\n        return Math.min(number, nums[index + 2]);\n      return Math.min(number, Math.min(...nums.slice(index + 2)));\n    }\n    // 3、返回最高金额列表中的最小值\n    return Math.min(\n      ...nums\n        .slice(index + 2)\n        .map((sec, secIdx) => {\n          // 2、拿到组合中最高金额\n          return getNextIndex(\n            index + 2 + secIdx,\n            count + 1,\n            Math.max(number, sec)\n          );\n        })\n        .filter((v) => v)\n    );\n  }\n  // 3、返回最高金额列表中的最小值\n  return Math.min(\n    ...nums.map((item, index) => getNextIndex(index, 1, item)).filter((v) => v)\n  );\n};\n```\n\n测试一下，好使。\n\n```javascript\n// minCapability([5038,3053,2825,3638,4648,3259,4948,4248,4940,2834,109,5224,5097,4708,2162,3438,4152,4134,551,3961,2294,3961,1327,2395,1002,763,4296,3147,5069,2156,572,1261,4272,4158,5186,2543,5055,4735,2325,1206,1019,1257,5048,1563,3507,4269,5328,173,5007,2392,967,2768,86,3401,3667,4406,4487,876,1530,819,1320,883,1101,5317,2305,89,788,1603,3456,5221,1910,3343,4597], 28)\n```\n\n但是太慢，leetCode 还是过不去！\n题为求能偷的 k 间房屋中最小金额。于是想到用二分法来做：\n1. 对金额先做二分，设定两个指针，一个指最左，一个指最右，设定一个 mid 值为此平均值\n2. 判断 mid 是否符合 k 间房屋的设定；遍历 nums 中所有小于 mid 的值，存在不相邻的 k 个即符合设定\n3. 如果符合说明它还可能不是最小的金额，要往左查找；如果不符合往右查找\n\n```javascript\n/*\n * @param {number[]} nums 房屋及其价值\n * @param {number} k 最少能偷多少家\n * @return {number}\n */\nvar minCapability = function (nums, k) {\n  let L = Math.min(...nums);\n  let R = Math.max(...nums);\n  function check(n) {\n    let cnt = 0;\n    for (let i = 0; i < nums.length; i++) {\n      if (nums[i] <= n) {\n        cnt++;\n        i++;\n      }\n    }\n    return cnt >= k;\n  }\n  while (L < R) {\n    let mid = Math.floor((L + R) / 2);\n    if (check(mid)) {\n      R = mid;\n    } else {\n      L = mid + 1;\n    }\n  }\n  return R;\n};\n```\n","slug":"leetcode/normal/thief","published":1,"updated":"2023-02-25T15:42:24.506Z","_id":"clej9a6bs000jf8tzjdq32vpi","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p><a href=\"https://leetcode.cn/problems/house-robber-iv/\" target=\"_blank\" rel=\"noopener\">https://leetcode.cn/problems/house-robber-iv/</a></p>\n<h2 id=\"解法\"><a href=\"#解法\" class=\"headerlink\" title=\"解法\"></a>解法</h2><p>初步思路是先获取窃取房屋的组合情况、再取得每一个组合的最高金额、再拿到所有最高金额中最小值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> minCapability = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">nums, k</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (k === <span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"built_in\">Math</span>.min(...nums);</span><br><span class=\"line\">  <span class=\"comment\">// 1、窃取房屋的组合情况</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getNextIndex</span>(<span class=\"params\">index, count, number</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果后边的房间不满足窃取规则，不做任何操作</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nums.length - index - <span class=\"number\">1</span> &lt; <span class=\"number\">2</span> * (k - count)) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (k === count + <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 如果是最后一个可窃取的房间，那么拿到后边房间都可以成为组合，返回最小值即可</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (index + <span class=\"number\">2</span> === nums.length - <span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">Math</span>.min(number, nums[index + <span class=\"number\">2</span>]);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"built_in\">Math</span>.min(number, <span class=\"built_in\">Math</span>.min(...nums.slice(index + <span class=\"number\">2</span>)));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 3、返回最高金额列表中的最小值</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Math</span>.min(</span><br><span class=\"line\">      ...nums</span><br><span class=\"line\">        .slice(index + <span class=\"number\">2</span>)</span><br><span class=\"line\">        .map(<span class=\"function\">(<span class=\"params\">sec, secIdx</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"comment\">// 2、拿到组合中最高金额</span></span><br><span class=\"line\">          <span class=\"keyword\">return</span> getNextIndex(</span><br><span class=\"line\">            index + <span class=\"number\">2</span> + secIdx,</span><br><span class=\"line\">            count + <span class=\"number\">1</span>,</span><br><span class=\"line\">            <span class=\"built_in\">Math</span>.max(number, sec)</span><br><span class=\"line\">          );</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        .filter(<span class=\"function\">(<span class=\"params\">v</span>) =&gt;</span> v)</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 3、返回最高金额列表中的最小值</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Math</span>.min(</span><br><span class=\"line\">    ...nums.map(<span class=\"function\">(<span class=\"params\">item, index</span>) =&gt;</span> getNextIndex(index, <span class=\"number\">1</span>, item)).filter(<span class=\"function\">(<span class=\"params\">v</span>) =&gt;</span> v)</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>测试一下，好使。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// minCapability([5038,3053,2825,3638,4648,3259,4948,4248,4940,2834,109,5224,5097,4708,2162,3438,4152,4134,551,3961,2294,3961,1327,2395,1002,763,4296,3147,5069,2156,572,1261,4272,4158,5186,2543,5055,4735,2325,1206,1019,1257,5048,1563,3507,4269,5328,173,5007,2392,967,2768,86,3401,3667,4406,4487,876,1530,819,1320,883,1101,5317,2305,89,788,1603,3456,5221,1910,3343,4597], 28)</span></span><br></pre></td></tr></table></figure>\n\n<p>但是太慢，leetCode 还是过不去！<br>题为求能偷的 k 间房屋中最小金额。于是想到用二分法来做：</p>\n<ol>\n<li>对金额先做二分，设定两个指针，一个指最左，一个指最右，设定一个 mid 值为此平均值</li>\n<li>判断 mid 是否符合 k 间房屋的设定；遍历 nums 中所有小于 mid 的值，存在不相邻的 k 个即符合设定</li>\n<li>如果符合说明它还可能不是最小的金额，要往左查找；如果不符合往右查找</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number[]&#125; nums 房屋及其价值</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number&#125; k 最少能偷多少家</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;number&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> minCapability = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">nums, k</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> L = <span class=\"built_in\">Math</span>.min(...nums);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> R = <span class=\"built_in\">Math</span>.max(...nums);</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">check</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (nums[i] &lt;= n) &#123;</span><br><span class=\"line\">        cnt++;</span><br><span class=\"line\">        i++;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> cnt &gt;= k;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (L &lt; R) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> mid = <span class=\"built_in\">Math</span>.floor((L + R) / <span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (check(mid)) &#123;</span><br><span class=\"line\">      R = mid;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      L = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> R;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p><a href=\"https://leetcode.cn/problems/house-robber-iv/\" target=\"_blank\" rel=\"noopener\">https://leetcode.cn/problems/house-robber-iv/</a></p>\n<h2 id=\"解法\"><a href=\"#解法\" class=\"headerlink\" title=\"解法\"></a>解法</h2><p>初步思路是先获取窃取房屋的组合情况、再取得每一个组合的最高金额、再拿到所有最高金额中最小值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> minCapability = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">nums, k</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (k === <span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"built_in\">Math</span>.min(...nums);</span><br><span class=\"line\">  <span class=\"comment\">// 1、窃取房屋的组合情况</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getNextIndex</span>(<span class=\"params\">index, count, number</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果后边的房间不满足窃取规则，不做任何操作</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nums.length - index - <span class=\"number\">1</span> &lt; <span class=\"number\">2</span> * (k - count)) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (k === count + <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 如果是最后一个可窃取的房间，那么拿到后边房间都可以成为组合，返回最小值即可</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (index + <span class=\"number\">2</span> === nums.length - <span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">Math</span>.min(number, nums[index + <span class=\"number\">2</span>]);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"built_in\">Math</span>.min(number, <span class=\"built_in\">Math</span>.min(...nums.slice(index + <span class=\"number\">2</span>)));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 3、返回最高金额列表中的最小值</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Math</span>.min(</span><br><span class=\"line\">      ...nums</span><br><span class=\"line\">        .slice(index + <span class=\"number\">2</span>)</span><br><span class=\"line\">        .map(<span class=\"function\">(<span class=\"params\">sec, secIdx</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"comment\">// 2、拿到组合中最高金额</span></span><br><span class=\"line\">          <span class=\"keyword\">return</span> getNextIndex(</span><br><span class=\"line\">            index + <span class=\"number\">2</span> + secIdx,</span><br><span class=\"line\">            count + <span class=\"number\">1</span>,</span><br><span class=\"line\">            <span class=\"built_in\">Math</span>.max(number, sec)</span><br><span class=\"line\">          );</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        .filter(<span class=\"function\">(<span class=\"params\">v</span>) =&gt;</span> v)</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 3、返回最高金额列表中的最小值</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Math</span>.min(</span><br><span class=\"line\">    ...nums.map(<span class=\"function\">(<span class=\"params\">item, index</span>) =&gt;</span> getNextIndex(index, <span class=\"number\">1</span>, item)).filter(<span class=\"function\">(<span class=\"params\">v</span>) =&gt;</span> v)</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>测试一下，好使。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// minCapability([5038,3053,2825,3638,4648,3259,4948,4248,4940,2834,109,5224,5097,4708,2162,3438,4152,4134,551,3961,2294,3961,1327,2395,1002,763,4296,3147,5069,2156,572,1261,4272,4158,5186,2543,5055,4735,2325,1206,1019,1257,5048,1563,3507,4269,5328,173,5007,2392,967,2768,86,3401,3667,4406,4487,876,1530,819,1320,883,1101,5317,2305,89,788,1603,3456,5221,1910,3343,4597], 28)</span></span><br></pre></td></tr></table></figure>\n\n<p>但是太慢，leetCode 还是过不去！<br>题为求能偷的 k 间房屋中最小金额。于是想到用二分法来做：</p>\n<ol>\n<li>对金额先做二分，设定两个指针，一个指最左，一个指最右，设定一个 mid 值为此平均值</li>\n<li>判断 mid 是否符合 k 间房屋的设定；遍历 nums 中所有小于 mid 的值，存在不相邻的 k 个即符合设定</li>\n<li>如果符合说明它还可能不是最小的金额，要往左查找；如果不符合往右查找</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number[]&#125; nums 房屋及其价值</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number&#125; k 最少能偷多少家</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;number&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> minCapability = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">nums, k</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> L = <span class=\"built_in\">Math</span>.min(...nums);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> R = <span class=\"built_in\">Math</span>.max(...nums);</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">check</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (nums[i] &lt;= n) &#123;</span><br><span class=\"line\">        cnt++;</span><br><span class=\"line\">        i++;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> cnt &gt;= k;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (L &lt; R) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> mid = <span class=\"built_in\">Math</span>.floor((L + R) / <span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (check(mid)) &#123;</span><br><span class=\"line\">      R = mid;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      L = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> R;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"clegsrobi0000jvoak3wpjef6","tag_id":"clegpttq6000ekzoacsmsoyen","_id":"clegsrobl0001jvoay8h2kdwe"},{"post_id":"clegss0560006jvoamoib6y1z","tag_id":"clegpvayd000mkzoaidh4a3n5","_id":"clegss0580007jvoabpqoq41b"},{"post_id":"clegss93o000cjvoaoi7l5dgf","tag_id":"clegpvayd000mkzoaidh4a3n5","_id":"clegss93o000djvoafvge0rpl"},{"post_id":"clegssnvr000gjvoaoa230igl","tag_id":"clegpuhvp000ikzoag893nzi6","_id":"clegssnvr000hjvoa88lfjdjv"},{"post_id":"clegstfco000sjvoaz67v6gmm","tag_id":"clegptl4e000bkzoaftwo3ljn","_id":"clegstfcq000tjvoakux56vlf"},{"post_id":"clegsrqdn0002jvoa146u59so","tag_id":"clegpttq6000ekzoacsmsoyen","_id":"clegsxr5c000ujvoa8cn4ah1v"},{"post_id":"clej99gl4000ff8tztfxjq6y6","tag_id":"clegpw4uq00004voaxkwiwepw","_id":"clej99gl5000gf8tzc6pv9csz"},{"post_id":"clej99xsz000hf8tz8hhxgrzd","tag_id":"clegpw4uq00004voaxkwiwepw","_id":"clej99xt0000if8tzrczmjpo5"},{"post_id":"clej9a6bs000jf8tzjdq32vpi","tag_id":"clegpw4uq00004voaxkwiwepw","_id":"clej9a6bt000kf8tzpp7nzp4g"}],"Tag":[{"name":"服务端","_id":"clegps4eh0000kzoa3b501g14"},{"name":"生活中的小确幸","_id":"clegpsa9y0002kzoac7z77ywd"},{"name":"生活中","_id":"clegpsfp00004kzoayc1zt08o"},{"name":"前端","_id":"clegpsouy0006kzoaolze227p"},{"name":"全栈","_id":"clegptl4e000bkzoaftwo3ljn"},{"name":"CSS","_id":"clegpttq6000ekzoacsmsoyen"},{"name":"JavaScript","_id":"clegpu1a0000gkzoaoik8pcgx"},{"name":"浏览器原理","_id":"clegpuhvp000ikzoag893nzi6"},{"name":"Javascript","_id":"clegpvayd000mkzoaidh4a3n5"},{"name":"算法","_id":"clegpw4uq00004voaxkwiwepw"},{"name":"后端","_id":"clegpwfb300024voahp6k52w6"}]}}